glottodata
?is.null
glottodata_exists <- function(){
if(!base::exists("glottodata") | base::is.null(glottodata) ){
glottodata <- getglottodata()
message("No input data provided, glottolog data downloaded")
}
}
glottodata_exists()
glottodata_exists <- function(){
if(!base::exists("glottodata") | base::is.null(glottodata) ){
glottodata <- getglottodata()
message("No input data provided, glottolog data downloaded")
return(glottodata)
}
}
glottodata
glottodata
glottodata <- glottodata()
glottodata <- getglottodata()
glottodata
glottodata %>% tidyr::filter(level != dialects)
glottodata %>% dplyr::filter(level != dialects)
glottodata %>% dplyr::filter(level != dialect)
glottodata$level
glottodata %>% dplyr::filter(level != "dialect")
?drop
rmdialects <- function(glottodata){
glottodata %>% dplyr::filter(level != "dialect")
glottodata
}
glottodata <- glottodata %>% dplyr::filter(level != "dialect")
glottodata
glottodata <- glottodata %>% dplyr::filter(level != "dialect")
glottodata$level
as.factor(glottodata$level)
glottodata %>% dplyr::filter(bookkeeping == TRUE)
glottodata %>% dplyr::filter(bookkeeping == TRUE)
glottodata$bookkeeping
as.logical(glottodata$bookkeeping)
glottodata$bookkeeping <- as.logical(glottodata$bookkeeping)
dplyr::filter(bookkeeping == TRUE)
glottodata %>% dplyr::filter(bookkeeping == TRUE)
glottodata %>% dplyr::filter(level != "dialect")
glottodata
load_all
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
glottodata <- get_glottolog()
library(data.table)
?getDTthreads
#' @importFrom data.table %like%
glottodata$name
head(glottodata)
glottodata <- get_glottolog()
glottodata
glottodata <- get_glottolog("glottolog")
glottodata
glottodata <- get_glottolog("glottolog")
library(devtools)
load_all()
document()
document()
load_all()
glottodata <- get_glottolog("glottolog")
glottodata$name %like% "yucuna"
glottodata
load_all()
glottodata$name %like% "yucuna"
glottodata <- get_glottolog("glottolog")
glottodata$name %like% "yucuna"
glottodata$name[glottodata$name %like% "yucuna"]
glottodata$name
glottodata$name[glottodata$name %like% "Apa"]
glottodata$name[glottodata$name %like% "Yucu"]
glottodata$name[glottodata$name %like% "yucuna"]
glottodata$name[glottodata$name %like% "Yucuna"]
glottodata$name[glottodata$name %like% "Yukuna"]
agrep("Yucuna",glottodata$name,ignore.case=T,value=T,max.distance = 0.1, useBytes = FALSE)
?agrep
agrep("Yucuna",glottodata$name,ignore.case=T,value=T,max.distance = 0.2, useBytes = FALSE)
agrep("Yucuna",glottodata$name,ignore.case=T,value=T,max.distance = 0.1, useBytes = FALSE)
glottodata[,c("name","glottocode"]
glottodata[,c("name","glottocode")]
head(glottodata)
glottodata[,c("name","id")]
agrep("Yucuna",glottodata[,c("name","id")],ignore.case=T,value=T,max.distance = 0.1, useBytes = FALSE)
?apply
apply(glottodata, margin = 2, simplify = FALSE, FUN = agrep, pattern = "Yucuna", ignore.case = T, value = T, max.distance = 0.1, useBytes = FALSE)
apply(glottodata, MARGIN = 2, simplify = FALSE, FUN = agrep, pattern = "Yucuna", ignore.case = T, value = T, max.distance = 0.1, useBytes = FALSE)
?agrep
agrep("Yucuna",glottodata$name,ignore.case=T,value=FALSE,max.distance = 0.1, useBytes = FALSE)
rowid <- agrep("Yucuna",glottodata$name,ignore.case=T,value=FALSE,max.distance = 0.1)
glottodata[rowid, ]
rowid <- agrep("Yucuna",glottodata$name,ignore.case=T,value=FALSE,max.distance = 0.1, simplify = FALSE)
rowid
found <- apply(glottodata, MARGIN = 2, simplify = FALSE, FUN = agrep, pattern = "Yucuna", ignore.case = T, value = FALSE, max.distance = 0.1)
found
find <- "Yukuna"
found <- apply(glottodata, MARGIN = 2, simplify = FALSE, FUN = agrep, pattern = "yucu1254", ignore.case = T, value = FALSE, max.distance = 0.1)
found
found
sjmisc::is_empty(found)
document
document()
load_all()
sjmisc::is_empty(found)
sjmisc::is_empty(found)
lapply(found, sjmisc::is_empty)
lapply(found, !sjmisc::is_empty)
lapply(found, sjmisc::!is_empty)
class(found)
n <- readline("enter a positive integer: ")
n
n <- readline("enter a positive integer: ")
n
library(googlesheets)
?lapply
library(devtools)
document()
load_all()
install()
load_all()
get_sheetnames("C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
)
get_sheetdata("C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx")
load_all()
get_sheetdata(path = "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx", sheets = "isolates")
isolates <- get_sheetdata("C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx")
isolates
isolates <- get_sheetdata("C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx", sheets = "isolates")
isolates
path
path <- "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
path
# 1. There is one sheet in which each row represents a glot (anything with a glottocode). The first column contains the glottocodes.
data <- get_sheetdata(path = path, sheets = "isolates", simplify = TRUE)
library(devtools)
load_all()
# 1. There is one sheet in which each row represents a glot (anything with a glottocode). The first column contains the glottocodes.
data <- get_sheetdata(path = path, sheets = "isolates", simplify = TRUE)
data
isolates <- get_sheetdata("C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx", sheets = "isolates2")
d1 <- "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
library(devtools)
load_all()
load_all()
# d1 <- "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
d2 <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/NounPhrase_V6.xlsx"
d3 <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/TAME_V6.xlsx.xlsx"
get_sheetnames(d2)
ts <- get_sheetnames(d2)
ts
get_sheetdata(path = d2, sheets = c(1:16))
ls <- get_sheetdata(path = d2, sheets = c(1:16))
data <- ls[[1]]
data
get_sheetdata(d1)
get_sheetdata(d1, sheets = 1)
data <- get_sheetdata(d1, sheets = 1)
id = 1
data[,id]),]
data[,id]
colnames(data)!= id
load_all()
# Check missing IDs
check_idmissing(data = data, idcol = id)
load_all()
check_idunique(data = data, idcol = id)
load_all()
check_idunique(data = data, idcol = id)
x <- check_idunique(data = data, idcol = id)
x
id
id = "glottocode"
data[,colnames(data)!= id]
# Check levels
levl <- lapply(data[,colnames(data)!= id], unique)
levl
# Print levels of all columns
levl <- lapply(data, unique)
levl
levels <- unlist(lapply(levl, paste, collapse=" , "))
levels
message('The variables have the following levels: \n')
print(as.data.frame(levels))
levl
levl
data
load_all()
check_varlevels(data = data)
data
check_varlevels(data = data)
load_all()
check_varlevels(data = data)
ts <- check_varlevels(data = data)
ts
load_all()
check_varlevels(data = data)
check_varlevels(data = data, messages = FALSE)
ts <- check_varlevels(data = data, messages = FALSE)
ts
load_all()
ts <- check_varlevels(data = data, messages = FALSE)
ts
load_all()
ts <- check_varlevels(data = data, messages = FALSE)
ts
ts <- check_varlevels(data = data, messages = TRUE)
load_all()
ts <- check_varlevels(data = data, messages = TRUE)
load_all()
ts <- check_varlevels(data = data, messages = TRUE)
ts <- check_varlevels(data = data, messages = FALSE)
ts
check_idmissing(data = data, idcol = id, messages = messages)
check_idmissing(data = data, idcol = id, messages = TRUE)
load_all()
check_idmissing(data = data, idcol = id, messages = TRUE)
ts <- check_idmissing(data = data, idcol = id, messages = TRUE)
ts
check_varlevels(data = data, messages = messages)
check_varlevels(data = data, messages = TRUE)
ts <- check_varlevels(data = data, messages = TRUE)
unlist(ts)
as_tibble(unlist(ts))
tibble::as_tibble(unlist(ts))
unlist(lapply(ts, paste, collapse=" , "))
varlevels <- lapply(data, unique)
levels <- unlist(lapply(varlevels, paste, collapse=" , "))
levels
levels[] <- unlist(lapply(varlevels, paste, collapse=" , "))
levels
unlist(lapply(varlevels, paste, collapse=" , "))
levels <- unlist(lapply(varlevels, paste, collapse=" , "))
data
colnames(data)
cbind(colnames(data), levels)
levels
levels <- unlist(lapply(varlevels, paste, collapse=" , "), use.names = FALSE)
levels
cbind(colnames(data), levels)
levels
class(levels)
typeof(levels)
names(levels)
colnames(data)
class(colnames(data))
bind(colnames(data), levels)
rbind(colnames(data), levels)
data.frame(variable = colnames(data), levels = levels)
View(data.frame(variable = colnames(data), levels = levels))
levs <- lapply(data, unique)
varlevels <- unlist(lapply(levs, paste, collapse=" , "), use.names = FALSE)
varlevels
levs <- lapply(data, unique)
levs <- unlist(lapply(levs, paste, collapse=" , "), use.names = FALSE)
varlevels <- data.frame(variable = colnames(data), levels = levs)
varlevels
load_all()
check_varlevels()
check_varlevels(data)
check_varlevels(data, messages = FALSE)
levs
levs <- lapply(data, unique)
levs
load_all()
check_varlevels()
check_varlevels(data = )
check_varlevels(data = data)
check_varlevels(data = data, messages = FALSE)
ts <- check_varlevels(data = data, messages = FALSE)
ts
ts <- check_varlevels(data = data, messages = TRUE)
ts
load_all()
ts <- glottobase()
ts
document()
?glottobase
glottosearch(glottodata = glottobase(), find = "yucu1253", partialmatch = FALSE, columns = "id")
# TOFIX: If partial match = FALSE, only one result should be returned.
#
glottosearch(glottodata = glottobase(), find = "yucu1253", partialmatch = FALSE, columns = "id")
find = "yucu1253"
partialmatch = FALSE
columns = "id"
length(find)
glottodata
glottodata <- get_glottolog("glottolog")
glottodata
length(find)
find
load_all()
glottosearch(glottodata = glottobase(), find = "yucu1253", partialmatch = FALSE, columns = "id")
glottocode = "yucu1253"
glottosearch("Tani")
glottosearch(find = "Tani")
glottosearch(find = "Tani", columns = "id")
glottosearch(find = "Tanimuka", columns = "id")
glottosearch(find = "Tanimu", columns = "id")
find = "Tanimu"
columns = "id"
is.null(glottodata)
glottodata
load_all()
glottodata <- get_glottolog("glottolog")
if(missing(find)){stop("No search term provided, please indicate what you want to search for.")}
find
partialmatch
partialmatch = TRUE
is.null(columns)
columns
glottodata_sel <- glottodata
glottodata_sel
glottodata_sel <- dplyr::select(glottodata, all_of(columns))
found <- apply(glottodata_sel, MARGIN = 2, simplify = FALSE,
FUN = base::agrep, pattern = find, ignore.case = T, value = FALSE, max.distance = ldist)
ifelse(partialmatch == TRUE, ldist <- 0.1, ldist <- 0)
found <- apply(glottodata_sel, MARGIN = 2, simplify = FALSE,
FUN = base::agrep, pattern = find, ignore.case = T, value = FALSE, max.distance = ldist)
found
find
find = "Yucuna"
found <- apply(glottodata_sel, MARGIN = 2, simplify = FALSE,
FUN = base::agrep, pattern = find, ignore.case = T, value = FALSE, max.distance = ldist)
found
ldist
glottodata_sel
glottosearch(find = "Tanimu")
glot_exists(c("yucu1253", "tani1258"))
transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
dplyr::transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
glottocode
purrr::map_lgl(glottocode, glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
purrr::map_lgl(glottocode, function(x) x == "yucu1253")
glottocode <- c("yucu1253", "tani1258")
purrr::map_lgl(glottocode, function(x) x == "yucu1253")
glottocode <- c("yucu1253")
glot_exists1 <- function(glottocode){
# dplyr::transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
# if(length(glottocode == 1)){
glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
# }
}
glot_exists1
purrr::map_lgl(glottocode, glot_exists1)
glottocode
glot_exists1
glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
# dplyr::transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
# if(length(glottocode == 1)){
existing <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
length(existing == 1)
nrow(existing == 1)
# }
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
# dplyr::transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
# if(length(glottocode == 1)){
existsdf <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
# }
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
purrr::map_lgl(glottocode, glot_exists1)
glot_exists1 <- function(glottocode){
# dplyr::transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
# if(length(glottocode == 1)){
existsdf <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
# }
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
purrr::map_lgl(glottocode, glot_exists1)
purrr::map_lgl(c("yucu1253", "tani1258"), glot_exists1)
purrr::map_lgl(c("yucu1253", "tanz1258"), glot_exists1)
load_all
load_all()
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
load_all()
load_all()
glottocode_exists_one
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
glottocode_exists_one <- function(glottocode, column){
existsdf <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = column)
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
load_all()
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
purrr::pmap_lgl(glottocode, glot_exists_one, columns = "id")
purrr::map_lgl(glottocode, glot_exists_one, .columns = "id")
purrr::map_lgl(glottocode, glot_exists_one, list(columns = "id"))
document()
load_all()
rm(list = c("glottocode_exists_one"))
glottocode_exists(c("yucu1253"))
glottocode_exists(c("yucu1253", "abcd1234"))
data
data[,idcol]
idcol = "glottocode"
data[,idcol]
glottocode_exists(data[,idcol])
glottocode_exists(c("yucu1253", "abcd1234"))
data[,idcol]
data[idcol]
data[[idcol]]
glottocode_exists(data[[idcol]])
existing <- glottocode_exists(data[[idcol]])
existing
data[existing,idcol]
data[!existing,idcol]
sum(!existing)
message("Not all IDs are valid glottocodes \n The following glottocodes do not exist:")
data[!existing,idcol]
data[existing,idcol]
data[[!existing,idcol]]
data[!existing,idcol, drop = TRUE]
data[existing,idcol, drop = TRUE]
?exec
?map2_lgl
purrr::map2_lgl(.x = glottocode, .f = glottocode_exists_one)
purrr::map_lgl(.x = glottocode, .f = glottocode_exists_one)
glot_exists_one <- function(find, columns){
existsdf <- glottosearch(glottodata = glottobase(), find = find, partialmatch = FALSE, columns = columns)
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
purrr::map2_lgl(.x = glottocode, .y = "id", .f = glot_exists_one)
glot_exists_one <- function(find, columns){
existsdf <- glottosearch(glottodata = glottobase(), find = find, partialmatch = FALSE, columns = columns)
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
glot_exists <- function(find, columns){
purrr::map2_lgl(.x = find, .y = columns, .f = glot_exists_one)
}
glot_exists(find = c("yucu1253", "abcd1234"), columns = "id")
?use_data_raw
use_data_raw(name = "glottobase")
load_all()
rm(list = c("glot_exists", "glot_exists_one"))
load_all()
document()
load_all()
glottodata
glottobase
load_all()
glottobase
document()
install()
load_all()
glottobase
glottobase <- get_glottolog(data = "glottolog")
glottobase
nrow(glottobase)
ncol(glottobase)
write_csv(glottobase, "data-raw/glottobase.csv")
?write.csv
readr::write_csv(glottobase, "data-raw/glottobase.csv")
document()
?glottobase
load_all()
?glottobase
glottobase
library(devtools)
load_all()
glottobase
?use_data
data(glottobase)
save(glottobase, file = "data-raw/glottobase.RData")
glottobase <- get_glottolog(data = "glottolog")
save(glottobase, file = "data-raw/glottobase.RData")
library(devtools)
load_all()
glottobase
install()
glottobase
data(glottobase)
document()
?glottobase
data("glottobase")
save(glottobase, file = "data-raw/glottobase.rda")
glottobase <- get_glottolog(data = "glottolog")
save(glottobase, file = "data-raw/glottobase.rda")
usethis::use_data(glottobase, overwrite = TRUE)
load_all()
library(devtools)
load_all
load_all()
glottodata
glottobase
glottocode_exists(c("yucu1253", "abcd1234"))
load_all()
glottocode_exists(c("yucu1253", "abcd1234"))
d1 <- "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
checkglottodata(data = d1, idcol = 1)
d1
data <- get_sheetdata(path = d1, sheets = 1)
checkglottodata(data = data, idcol = 1)
data
View(data)
d1
checkglottodata(data = data, idcol = 1)
check_varlevels(data = data, messages = messages)
load_all()
check_varlevels(data = data, messages = messages)
check_varlevels(data = data, messages = TRUE)
check_glottocodes(data = data, idcol = idcol, messages = messages)
idcol = 1
messages = TRUE
check_glottocodes(data = data, idcol = idcol, messages = messages)
