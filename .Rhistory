all(unique(sf::st_geometry_type(glottodata)) == "POLYGON")
any(unique(sf::st_geometry_type(glottodata)) == "POLYGON")
glottodata
glottodata()
get_glottobase()
load_all()
glottodata
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
glottodata <- gbsa[1:3,]
glottodata
glottopoints <- points2pols(glottopoins)
glottopols <- points2pols(glottopoints)
glottopols <- points2pols(glottopoints, interpolation = "voronoi")
points2pols(glottopoints = glottopoints, interpolation = "thiessen", continent = "south america")
glottopoints
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
glottopoints <- glottofilter(glottodata = gb, continent = "South America")
glottopoints <- glottopoints[1:30, ]
glottopoints
extractgeodata(glottodata = glottopoints, geodata = geodata, radius = 10, fun = mean)
glottopols <- points2pols(glottopoints, interpolation = "voronoi")
extractgeodata(glottodata = glottopoints, geodata = geodata, radius = 10, fun = mean)
extractgeodata(glottodata = glottopols, geodata = geodata, radius = 10, fun = mean)
glottopoints <- glottopoints[1:3, ]
glottopols <- points2pols(glottopoints, interpolation = "voronoi")
extractgeodata(glottodata = glottopols, geodata = geodata, radius = 10, fun = mean)
extractgeodata(glottodata = glottopols, geodata = geodata, fun = mean)
glottopols
plot(glottopols)
glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
plot(glottopols)
glottopoints <- glottofilter(continent = "Colombia")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "Colombia")
glottopoints
glottopoints <- glottofilter(country = "Colombia")
glottopoints
glottopoints <- glottofilter(country = "Netherlands")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
glottopols
glottolog <- get_glottolog(data = "glottolog")
glottobase <- glottologbooster(glottologdata = glottolog)
glottobase
glottopoints <- glottofilter(country = "Netherlands")
glottopoints
points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
?sf::st_intersection
country <- rnaturalearth::ne_countries(country = country, continent = continent, returnclass = "sf", scale = "medium")
country
sf:st_geometry(country)
sf::st_geometry(country)
load_all()
points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
glottopoints <- glottofilter(country = "Netherlands")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
glottopols
extractgeodata(glottodata = glottopols, geodata = geodata, radius = 10, fun = mean)
plot(glottopols)
message("argument 'radius' not relevant for the specified interpolation.")
extractgeodata(glottodata = glottopols, geodata = geodata,fun = mean)
?get_geodata
#' glottopoints <- glottofilter(continent = "South America")
#' glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
glottopols
glottopols
glottomap(pols = glottopols)
load_all()
load_all()
glottomap_dynamic(pols = glottopols)
glottomap_dynamic(glottodata = glottopols)
glottodata = glottopols
is_polygon(glottodata)
tmap::tmap_mode("view")
tmap::tm_shape(pols)
tmap::tm_shape(pols) +
tmap::tm_polygons(id = label, col = colorby)
glottodata
label = "glottocode"
tmap::tm_shape(pols) +
tmap::tm_polygons(id = label, col = colorby)
label <- "glottocode"
tmap::tm_shape(pols) +
tmap::tm_polygons(id = label, col = colorby)
tmap::tm_shape(pols) +
tmap::tm_polygons()
pols
load_all()
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottopols
load_all()
glottopols
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottodata = glottopols
label = "glottocode"
colorby = "family_size"
tmap::tmap_mode("view")
is_polygon(glottodata)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby)
load_all()
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottopoints <- glottofilter(continent = "South America")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "South America")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
glottopoints
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
?tmap
load_all()
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "cont")
glottodata <- glottopols
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "cont")
col
colorby
colorby <- "family_size_rank"
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "cont")
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "order")
colorby
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby)
colorby = "family_size"
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank")
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 25)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 25)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 100)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 25)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 70)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 100)
suppressMessages(tmap::tmap_mode("view"))
map::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 25)}
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 25)}
colorby = "family_size_rank"
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 100)}
dev.off()
dev.off()
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 100)}
library(devtools)
load_all()
# glottopoints <- glottofilter(continent = "South America")
# glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
# glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
glottpoints
# glottopoints <- glottofilter(continent = "South America")
# glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
# glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
glottomap_dynamic <- function(glottodata, label, colorby = NULL){
suppressMessages(tmap::tmap_mode("view"))
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 100)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(id = label, col = colorby, scale = .95, alpha = .85) }
}
# glottopoints <- glottofilter(continent = "South America")
# glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
# glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
glottomap_dynamic <- function(glottodata, label, colorby = NULL){
suppressMessages(tmap::tmap_mode("view"))
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 100)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(id = label, col = colorby, scale = .95, alpha = .85) }
}
glottopoints <- glottofilter(continent = "South America")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby)
load_all()
rm(list = c("glottomap_dynamic"))
load_all()
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
library(devtools)
document()
load_all()
install(force = TRUE)
library(devtools)
document()
load_all()
install(force = TRUE)
document()
load_all()
install(force = TRUE)
install(force = TRUE)
library(devtools)
document()
load_all()
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
load_all()
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
load_all()
get_geodata()
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
load_all()
get_geodata()
library(devtools)
document()
load_all()
install(force = TRUE)
stack <- raster::getData(name = "worldclim", var = "bio", res = 10)
stack$bio1
plot(stack$bio1)
raster::plot(stack$bio1)
glottopoints <- glottofilter(continent = "South America")
glottopoints <- glottopoints[1:3, ]
glottopoints
extractgeodata(glottodata = glottopoints, geodata = stack, radius = 10, fun = mean)
class(stack)
?raster::getData
paths <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s_stack"
stack <- raster::stack(paths)
paths <- "D:/Global/Climate/WORLDCLIM2/1km/South America/worldclimSA1km"
stack <- raster::stack(paths)
stack
raster::plot(stack$bio01)
list.files(paths)
list.files("D:/Global/Climate/WORLDCLIM2/1km/South America")
list.files("D:/Global/Climate/WORLDCLIM2/1km/South America", full.names = TRUE)
stack
outfile <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.tif"
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
outfile <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd"
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
raster::stack(outfile)
stack <- raster::stack(filepaths)
st <- raster::stack(outfile)
raster::plot(st$bio01)
outfile
outfile <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.tif"
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
outfile
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
?writeRaster
raster::writeRaster(stack, filename = outfile, format = "GTiff", overwrite = TRUE)
tools::file_path_sans_ext(outfile)
newnames <- paste0("bio", sprintf("%02d", seq(1,19)))
newnames
names(stack) <- newnames
outfile
raster::writeRaster(stack, filename = outfile, format = "GTiff", overwrite = TRUE)
names(stack)
load_all()
path
ras <- tryCatch(raster::raster(path), error=function(e){})
ras
load_all()
install(force = TRUE)
.rs.restartR()
library(devtools)
load_all()
get_geodata(path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd")
ts <- get_geodata(path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd")
ts
path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd"
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
vec
ras <- tryCatch(raster::raster(path), error=function(e){})
ras
ras <- tryCatch(raster::stack(path), error=function(e){})
ras
ras <- tryCatch(raster::raster(path), error=function(e){})
ras
str(ras)
str(ras)@file
ras@file
ras@file@nbands
ras@file@nbands != 1
!is.null(ras) & ras@file@nbands != 1
load_all()
path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd"
get_geodata(path = path)
ts <- get_geodata(path = path)
ts
ts <- get_geodata_path(path = path)
ts
load_all()
ts <- get_geodata_path(path = path)
ts
ts <- get_geodata(path = path)
ts
install()
?isLonLat
?st_is_longlat
?group_by
?return
glottodata
glottopoints <- glottofilter(continent = "South America")
glottodata <- glottopoints[1:3,]
is_point(glottodata)
load_all()
is_point(glottodata)
load_all()
is_point(glottodata)
geodata <- get_geodata("D:/Global/Soils/HWSD/1km/Global/sq1.asc")
extracted <- sf::st_intersection(x = glottodata, y = geodata)
elevation <- get_geodata("D:/Global/Topography/SRTM/250m/South America/SRTM250mSA.tif")
geodata <- elevation
extracted <- sf::st_intersection(x = glottodata, y = geodata)
rivervect <- get_geodata("D:/Global/Hydrography/drainage density/South America/South America_constant_Dd.gpkg")
rivers <- rivervect["strmOrder"]
geodata <- rivers
extracted <- sf::st_intersection(x = glottodata, y = geodata)
geodata <- contransform_lonlat(geodata)
extracted <- sf::st_intersection(x = glottodata, y = geodata)
extracted
ecoregions <- get_geodata("D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp")
ecoregions <- ecoregions[, "ECO_NAME"]
names(ecoregions)[1] <- "ecoregion"
geodata <- ecoregions
extracted <- sf::st_intersection(x = glottodata, y = geodata)
extracted
extracted[,names(st_drop_geometry(geodata))]
extracted[,names(sf::st_drop_geometry(geodata))]
sf::st_drop_geometry(geodata)
names(sf::st_drop_geometry(geodata))
extracted
names(geodata)
sf::st_drop_geometry(extracted)[,names(sf::st_drop_geometry(geodata))]
?glot2geoglot
load_all()
stop("glottodata is not recognized as a spatial object, use \code{glot2geoglot} to convert it")
stop("glottodata is not recognized as a spatial object, use 'glot2geoglot' to convert it")
glottopols
glottodata
glottodata  <- points2pols(points = glottodata, type = "buffer", radius = 10)
?points2pols
glottodata  <- points2pols(points = glottodata, interpolation = "buffer", radius = 10)
glottodata  <- points2pols(glottopoints = glottodata, interpolation = "buffer", radius = 10)
glottodata
sf::st_area(glottodata)
ar <- sf::st_area(glottodata)
ar / 1000
plot(glottodata)
all.equal(ar)
identical(ar)
identical(ar)
unique(sf::st_area(glottodata))
if(unique(sf::st_area(glottodata)) != 1){warning('Total length is only meaningful if glottopols have same area.')}
if(length(unique(sf::st_area(glottodata))) != 1){warning('Total length is only meaningful if glottopols have same area.')}
if(length(unique(sf::st_area(glottodata))) != 1){warning(" fun='totlength' is only meaningful if glottopols have same area.")}
str(hello)
str(lonlat2utm)
library(devtools)
load_all()
str(lonlat2utm)
srcfile <- attr(attr(lonlat2utm,"srcref"),"srcfile")
srcfile$filename
srcfile <- attr(attr("lonlat2utm","srcref"),"srcfile")
srcfile$filename
funcname = lonlat2utm
funcname
load_all()
get_funcsource(hello)
get_funcsource(lonlat2utm())
get_funcsource(lonlat2utm
)
noquote("lonlat2utm")
get_funcsource(lonlat2utm)
get_funcsource(noquote("lonlat2utm"))
get_funcsource(eval(noquote("lonlat2utm")))
get_funcsource(substitute(noquote("lonlat2utm")))
get_funcsource(substitute("lonlat2utm"))
get_funcsource(eval("lonlat2utm"))
is.symbol("lonlat2utm")
as.symbol("lonlat2utm")
get_funcsource(as.symbol)
get_funcsource(as.symbol("lonlat2utm"))
x <- as.symbol("lonlat2utm")
x
get_funcsource(x)
?substitute
enquote(lonlat2utm())
quote(lonlat2utm())
x <- quote(lonlat2utm())
gsub("()", x)
gsub(pattern = "()", x = x)
gsub(pattern = "()", x = quote(x))
x <- quote(lonlat2utm())
class(x)
class(lonlat2utm)
as.function(x)
eval(x)
class(ensym("lonlat2utm"))
class(ensyms("lonlat2utm"))
?ensym
library(dplyr)
class(ensyms("lonlat2utm"))
class(ensym("lonlat2utm"))
quote("lonlat2utm")
quote(lonlat2utm)
eval(lonl)
eval(lonlat2utm)
eval("lonlat2utm")
eval("lonlat2utm")
expr("lonlat2utm")
expr(lonlat2utm)
eval(expr(lonlat2utm))
get("lonlat2utm")
load_all()
get_funcsource("lonlat2utm")
get_funcsource(lonlat2utm)
class(lonlat2utm)
class(lonlat2utm())
class(expr(lonlat2utm()))
class(enexpr(lonlat2utm()))
substitute("lonlat2utm")
substitute(lonlat2utm())
substitute(lonlat2utm
)
x <- substitute(lonlat2utm)
eval(x)
class(x)
class(eval(x))
class(lonlat2utm)
get_funcsource("hello")
get_funcsource(hello)
get_funcsource(read_cldf())
get_funcsource(read_cldf
)
get_funcsource(%>%)
get_funcsource("%>%")
get_funcsource(contransform_lonlat())
get_funcsource(contransform_lonlat
)
document()
?lonlat2utm
??glottospace
?glottospace
get_funcsource(glot_exists_one)
hello()
?left_join
glottobase[, c(1:4)]
glottobase[c(1:4), ]
get_glottobase()
glottodata <- glottobase[c(1:4), ]
load_all()
join_glottodata(glottodata)
names(glottodata)
names(glottodata)[1] <- "glottocode"
join_glottodata(glottodata)
x <- join_glottodata(glottodata)
x$geometry
glottodata <- glottodata[,1]
glottodata
x <- join_glottodata(glottodata)
x
glottodata <- glottobase[c(1:4), c(1,2)]
names(glottodata)[1] <- "glottocode"
glottodata
join_glottodata(glottodata)
glottobase
glottobase <- get_glottobase()
glottobase
id
id <- contrans_id2gc(id)
id
id = NULL
id <- contrans_id2gc(id)
id
dplyr::left_join(x = glottodata, y = glottobase, by = id)
sf::st_join(x = glottodata, y = glottobase, by = id)
?merge.data.frame
# dplyr::left_join(x = glottodata, y = glottobase, by = id)
sf::merge(x = glottobase, y = glottodata, by = id)
library(sf)
?st_merge
?merge
?st_join
glottobase
id
sf::merge.sf(x = glottobase, y = glottodata, by = id)
sf::merge(x = glottobase, y = glottodata, by = id)
install.packages("sf")
install.packages("sf")
