glottobase
glottobase[,id]
glottobase <- glottobase[,id]
dplyr::left_join(x = glottodata, y = glottobase, by = id)
glottodata
get_funcsource(contrans_id2gc())
get_funcsource(contrans_id2gc)
glottobase
glottolog <- get_glottolog(data = "glottolog")
glottobase <- glot2geoglot(glottolog)
glottospace <- glot2geoglot(glottolog)
glottospace
glottologdata <- get_glottolog(data = "glottolog")
glottologdata
glottologdata <- glottologdata %>% dplyr::rename("glottocode" = "id", "isocode" = "iso639P3code")
glottospace <- glot2geoglot(glottologdata)
glottospace
glottospace <- glottospace[,c("glottocode", "isocode")]
glottospace
checkdata_idunique(glottospace, "glottocode")
checkdata_idunique(st_drop_geometry(glottospace), "glottocode")
get_funcsource(glottodata_spatial)
load_all()
glottospace <- get_glottospace()
glottospace
?glottodata_addcoords
load_all()
?glottodata_addcoords
document9
document()
?glottodata_addcoords
get_funcsource(glottodata_addcoords())
get_funcsource(glottodata_addcoords
)
# Adding names of countries and continents
world <- rnaturalearth::ne_countries(returnclass = "sf", scale = "medium")
world <- world[, c("name", "continent", "subregion")]
names(world)[1] <- "country"
names(world)[3] <- "region"
sf::st_join(x = glottodata, y = world, left = TRUE)
glottodata <- get_glottospace()
glottodata[1:4, ]
glottodata <- glottodata[1:4, ]
sf::st_join(x = glottodata, y = world, left = TRUE)
world
sf::st_make_valid(world)
world <- sf::st_make_valid(world)
sf::st_join(x = glottodata, y = world, left = TRUE)
document()
load_all()
glottodata
colnames(glottodata)
colnames(glottodata) == "glottocode"
sum(colnames(glottodata) == "glottocode")
checkdata_glottocol(data = glottodata)
load_all()
checkdata_glottocol(data = glottodata)
checkdata_glottocol(glottodata = glottodata)
existing <- glottocode_exists(glottodata[[id]])
glottodata
id
glottodata[[id]]
glottocode_exists(glottodata[[id]])
glottocodes_exist(glottodata[[id]])
get_funcsource(glottocode_exists())
get_funcsource(glottocode_exists
)
get_glottospace()
get_glottobase()
load_all()
glottocode_exists(glottodata[[id]])
id
glottodata[[id]]
columns = "glottocode"
find = glottodata[[id]]
purrr::map2_lgl(.x = find, .y = columns, .f = glot_exists_one)
find = glottodata[[id]][1]
find
# TODO: Do not load glottobase each time. This will be solved if glottodata is added to package.
existsdf <- glottosearch(glottodata = get_glottobase(), find = find, partialmatch = FALSE, columns = columns)
existsdf
glottocode
glottocode = glottodata[[id]]
glot_exists(find = glottocode, columns = "glottocode")
glottodata
glottodata = get_glottobase()
glottodata
find
existsdf <- glottosearch(glottodata = get_glottobase(), find = find, partialmatch = FALSE, columns = columns)
existsdf
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
nrow(existsdf) == 1
ifelse(nrow(existsdf) == 1, existing <- TRUE, existing <- FALSE)
nrow(existsdf) == 1
load_all()
existing <- glottocode_exists(glottodata[[id]])
existing
existing <- glottocode_exists(glottodata[[id]])
glottodata[[id]]
document()
document()
load_all()
document()
load_all()
document()
load_all()
document()
utils::browseURL("www.glottolog.org")
utils::browseURL("http://www.glottolog.org")
document()
load_all()
glottocode_online("yucu1253")
glottocode_online("yucu1253")
?glottosearch
install()
glottobase
load_all()
library(devtools)
load_all()
build()
build_readme()
build_readme()
use_lifecycle_badge("experimental")
use_lifecycle_badge("experimental")
library(devtools)
build_readme()
load_all()
build()
library(devtools)
load_all()
funcsource("glottocode_exists")
use_pipe()
install()
library(devtools)
document()
load_all()
install(force = TRUE)
load_all()
funcsource(points2pols())
funcsource(points2pols
)
pts <- glottofilter(continent = "South America")
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
glottopoints <- glottofilter(continent = "South America")
# FIXME: area of buffers is not equal!
# sf::st_area(glottodata)
glottopoints <- contransform_lonlat(glottopoints)
# Alternative could be to convert to equidistant projection: https://epsg.io/54032
epsg_utm <- lonlat2utm(sf::st_coordinates(glottopoints))
pts <- sf::st_transform(glottopoints, sf::st_crs(epsg_utm))
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pols <- sf::st_set_geometry(pts, "pols")
continent = "South America"
country = NULL
country <- rnaturalearth::ne_countries(country = country, continent = continent, returnclass = "sf", scale = "medium")
country <- sf::st_geometry(country)
country <- sf::st_transform(country, sf::st_crs(epsg_utm))
country
plot(country)
library(sf)
nc_dissolve(country)
?mergevec
?st_union
st_union(country)
un <- st_union(country)
plot(un)
un <- st_union(country, by_feature = TRUE)
plot(un)
un <- st_cast(st_union(country), "POLYGON")
plot(un)
un
do.call(rbind, country)
rbind.sf(country)
un <- st_combine(country)
plot(un)
un <- st_union(country)
plot(un)
library(sfheaders)
library(nngeo)
sf_remove_holes(un)
un <- sf_remove_holes(un)
plot(un)
load_all()
install(force = TRUE)
load_all()
install(force = TRUE)
?glottosave
load_all()
funcsource(glottosave)
is_sf
load_all()
funcsource("extractgeodata")
fun = mean
fun
enquote(fun)
substitute(fun)
as.character(fun)
get(fun)
fun
match.fun(fun)
print(fun)
?get
get("mean")
quote(fun)
fun
str(fun)
substitute(fun)
eval(fun)
names(fun)
fun
quote(fun)
eval(fun)
quote(eval(fun))
deparse(quote(fun))
class(fun)
?UseMethod
getS3method(fun)
getS3method("mean")
deparse(substitute(fun))
substitute(fun)
eval(fun)
substitute(eval(fun))
mean
UseMethod(fun)
UseMethod(eval(fun))
get(mean)
get("mean")
geodata
roughness <- get_geodata("D:/Global/Topography/Geomorpho90m/250m/Global/dtm_roughness_merit.dem_m_250m_s0..0cm_2018_v1.0.tif")
names(roughness) <- "roughness"
geodata = roughness
glottopoints <- glottofilter(continent = "South America")
glottopols <- points2pols(glottopoints, method = "voronoi", continent = "South America")
glottodata <- glottopols[1:3,]
glottodata
geodata
names(geodata)
fun
fun = "mean"
fun
paste(names(geodata),fun, sep = "_")
fun = function(x){mean(x,na.rm=T)
}
fun
is.function(fun)
is.function("mean")
if(is.function(fun)){funname <- "expr"
} else {funname <- fun}
funname
fun = "mean"
if(is.function(fun)){funname <- "expr"
} else {funname <- fun}
funname
paste(names(geodata),funname, sep = "_")
load_all()
install(force = TRUE)
climate <- get_geodata("D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd")
climate <- get_geodata("D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd")
load_all()
climate <- get_geodata("D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd")
funname
names(geodata)
geodata <- climate
names(geodata)
paste(names(geodata),funname, sep = "_")
install(force = TRUE)
document()
load_all()
install(force = TRUE)
document()
library(devtools)
document()
load_all()
glottodata <- sf::st_read("output/NWA.gpkg")
glottodata <- sf::st_read("C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolatesoutput/NWA.gpkg")
glottodata <- sf::st_read("C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolates/output/NWA.gpkg")
glottomap(glottodata)
glottomap_dynamic(glottodata)
label <- "glottocode"
glottomap_dynamic(glottodata)
glottomap_dynamic(glottodata, label = "glottocode")
glottomap_dynamic(glottodata, label = "glottocode", colorby = "family_id")
load_all()
glottomap(glottodata, label = "glottocode", colorby = "family_id")
glottomap(glottodata)
glottodata
glottodata[c("chim1302", "colo1256"), ]
glottodata[glottocode == c("chim1302", "colo1256"), ]
glottodata["glottocode" == c("chim1302", "colo1256"), ]
glottodata["glottocode" == c("chim1302", "colo1256")]
glottodata$glottocode == c("chim1302", "colo1256")
glottodata$glottocode %in% c("chim1302", "colo1256")
glottodata[glottodata$glottocode %in% c("chim1302", "colo1256")]
glottodata[glottodata$glottocode %in% c("chim1302", "colo1256"), ]
glottodata <- glottodata[glottodata$glottocode %in% c("chim1302", "colo1256"), ]
geodata
elevation <- get_geodata("D:/Global/Topography/SRTM/250m/South America/SRTM250mSA.tif")
names(elevation) <- "elevation"
geodata <- elevation
fun <- "mean"
add <- TRUE
radius <- NULL
out <- extractraster(glottodata = glottodata, geodata = geodata, radius = radius, fun = fun, add = add)
fun <- mean
out <- extractraster(glottodata = glottodata, geodata = geodata, radius = radius, fun = fun, add = add)
out
extracted <- raster::extract(x = geodata, y = glottodata, fun = fun)
fun
?extract
extracted <- raster::extract(x = geodata, y = glottodata, fun = fun, na.rm = TRUE)
extracted
document()
load_all()
install(force = TRUE)
glottodata
geodata
extractgeodata(glottodata = glottodata, geodata = geodata,fun = "mean")
fun
fun <- eval(as.symbol(fun))
fun
out <- extractraster(glottodata = glottodata, geodata = geodata, radius = radius, fun = fun, add = add)
out
geodata
glottodata
raster::extract(x = geodata, y = glottodata, fun = fun, na.rm = TRUE)
extracted <- raster::extract(x = geodata, y = glottodata, fun = fun, na.rm = TRUE)
extracted <- as.data.frame(extracted)
names(extracted) <- names(geodata)
glottodata
extracted
cbind(glottodata, extracted)
document()
load_all()
install(force = TRUE)
glottodata
is_polygon(glottodata)
load_all()
is_polygon(glottodata)
extracted
document()
load_all()
install(for)
install(force = TRUE)
geodata
extracted
glottodata
cbind(glottodata, extracted)
glottodata <- cbind(glottodata, extracted)
glottodata
load_all()
funcsource(points2pols)
?st_set_geometry
glottopoints <- glottofilter(continent = "South America")
pts <- glottopoints
pts
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
# FIXME: area of buffers is not equal!
# sf::st_area(glottodata)
glottopoints <- contransform_lonlat(glottopoints)
# Alternative could be to convert to equidistant projection: https://epsg.io/54032
epsg_utm <- lonlat2utm(sf::st_coordinates(glottopoints))
pts <- sf::st_transform(glottopoints, sf::st_crs(epsg_utm))
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
pols
sf::st_intersects(pts, pols)
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts
sf::st_set_geometry(pts, NULL)
pols <- sf::st_set_geometry(pts, NULL)
pols
library(sf)
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
pols
pts
pols <- sf::st_set_geometry(pts, NULL)
pols
pols %>% rename(geometry = pols)
pols %>% dplyr::rename(geometry = pols)
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pols <- sf::st_set_geometry(pts, NULL) %>% dplyr::rename(geometry = pols)
pols
pols <- sf::st_set_geometry(pols, "geometry")
pols
document()
load_all()
install(force = TRUE)
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts
pts$geometry
pts$points <- pts$geometry
pts
pols <- sf::st_set_geometry(pts, NULL) %>% dplyr::rename(geometry = pols)
pols
pols <- sf::st_set_geometry(pols, "geometry")
pols
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
pts %>% dplyr::rename(geometry = pols)
pols <- sf::st_set_geometry(pts, NULL) %>% dplyr::rename(geometry = pols)
pols <- sf::st_set_geometry(pols, "geometry")
pols
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
pols <- sf::st_set_geometry(pts, NULL) %>% mutate() %>% dplyr::rename(geometry = pols)
pols <- sf::st_set_geometry(pols, "geometry")
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
sf::st_set_geometry(pts, NULL) %>% mutate() %>% dplyr::rename(geometry = pols)
sf::st_set_geometry(pts, NULL) %>% dplyr::mutate() %>% dplyr::rename(geometry = pols)
pols <- sf::st_set_geometry(pts, NULL) %>% dplyr::mutate() %>% dplyr::rename(geometry = pols)
pols <- sf::st_set_geometry(pols, "geometry")
pols
ols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
ols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
st_drop_geometry(pts)
st_drop_geometry(pts) %>% mutate() %>% dplyr::rename(geometry = pols)
st_drop_geometry(pts) %>% dplyr::mutate() %>% dplyr::rename(geometry = pols)
pols <- st_drop_geometry(pts) %>% dplyr::mutate() %>% dplyr::rename(geometry = pols)
sf::st_set_geometry(pols, "geometry")
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
pols <- st_drop_geometry(pts) %>% relocate(pols, .after = last_col()) %>% dplyr::rename(geometry = pols)
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
# st_crs(pols) <- st_crs(pts)
pols <- sf::st_set_crs(x = pols, value = sf::st_crs(pts))
# match them to glottopoints:
pts$pols <- pols[unlist(sf::st_intersects(pts, pols))]
pts$points <- pts$geometry
pols <- st_drop_geometry(pts) %>% dplyr::relocate(pols, .after = last_col()) %>% dplyr::rename(geometry = pols)
pols
pols <- sf::st_set_geometry(pols, "geometry")
pols
document()
load_all()
install(force = TRUE)
geodata
library(devtools)
document()
load_all()
install(force = TRUE)
library(devtools)
document()
load_all()
install(force = TRUE)
library(devtools)
document()
load_all()
install()
library(devtools)
document()
?glot_exists
document()
?glot_exists
document()
?glot_exists
