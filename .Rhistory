} else {
ras <- tryCatch(raster::raster(path), error=function(e){})
if(!is.null(ras)){message("Raster data loaded")}
}
if(!is.null(ras)){message("Raster data loaded")}
rm(list = ls())
load_all()
rasvec <- get_rasvec(path = path)
path
path <- "D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp"
rasvec <- get_rasvec(path = path)
path
load_all()
rasvec <- get_rasvec(path = path)
if(!file.exists(path)){stop("Path not found")}
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
if(!is.null(vec)){message("Vector data loaded")
} else {
ras <- tryCatch(raster::raster(path), error=function(e){})
if(!is.null(ras)){message("Raster data loaded")}
}
if(is.null(vec) & is.null(ras)){
stop(paste0("Cannot open ", path))}
ras <- NULL
if(is.null(vec) & is.null(ras)){
stop(paste0("Cannot open ", path))}
rasvec <- unlist(list(ras, vec))[[1]]
rasvec
list(ras, vec)
unlist(list(ras, vec))
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
if(!is.null(vec)){ras <- NULL
} else {
ras <- tryCatch(raster::raster(path), error=function(e){})
}
if(is.null(vec) & is.null(ras)){
stop(paste0("Cannot open ", path))
}
if(is.null(vec) & !is.null(ras)){
rasvec <- ras
message("Raster data loaded")
}
if(!is.null(vec) & is.null(ras)){
rasvec <- vec
message("Vector data loaded")
}
rasvec
sa <- st_read(dsn = "output/south america all.gpkg")
path <- "C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolates/output/south america all.gpkg"
path
sa <- st_read(dsn = path)
sa <- sf::st_read(dsn = path)
dist <- gs_geodist(sa, label = "glottocode")
?lonlat
document()
library(devtools)
document()
library(devtools)
document()
document()
load_all()
path
sa
dist <- pointdist_bird(sa, label = "glottocode")
dist
distmat <- as.matrix(dist)
class(dist)
distmat <- as.matrix(dist)
distmat
rowSums(is.na(distmat))
rowna <- rowSums(is.na(distmat))
colna <- colSums(is.na(distmat))
rmcol <- which(colSums(is.na(distmat)) > min(colna))
rmrow <- which(rowSums(is.na(distmat)) > min(rowna))
rmcol
if(!purrr::is_empty(rmcol)){  distmat <- distmat[,-rmcol] }
if(!purrr::is_empty(rmrow)){  distmat <- distmat[-rmrow,] }
distdf <- as.data.frame(distmat)
distdf
data.table::setDT(distdf, keep.rownames = "id")
distdf
distdf
data
sa
data <- sa
idcol <- "glottocode"
distdf <- as.data.frame(distmat)
distdf
distdf <- tibble::rownames_to_column(distdf)
distdf
colnames(data)[colnames(data) == idcol]
dplyr::inner_join(data, distdf, by = c(idcol = "id"))
idcol
data <- sa
distdf <- as.data.frame(distmat)
distdf <- tibble::rownames_to_column(distdf, "id")
dplyr::inner_join(data, distdf, by = c(idcol = "id"))
head(data)
dplyr::inner_join(data, distdf, by = c("glottocode" = "id"))
idcol = "glottocode"
dplyr::inner_join(data, distdf, by = c(idcol = "id"))
?parse
parse(idcol)
eval(idcol)
dplyr::inner_join(data, distdf, by = c(eval(idcol) = "id"))
distdf <- as.data.frame(distmat)
distdf <- tibble::rownames_to_column(distdf, "id")
colnames(data)[colnames(data) == idcol] <- "id"
dplyr::inner_join(data, distdf, by = "id") # not using by = c("a" = "b") because only works with character strings and not with idcol object
joindatadist(data = sa, idcol = "glottocode", dist = dist)
document()
load_all()
joindatadist(data = sa, idcol = "glottocode", dist = dist)
distdf <- joindatadist(data = sa, idcol = "glottocode", dist = dist)
distdf
distdf[,"isolate"]
head(distdf)
distdf[,"family_size" == 1]
distdf$family_size == 1
distdf[distdf$family_size == 1]
distdf[distdf$family_size == 1, ]
load_all()
build()
document()
load_all()
build()
document()
load_all()
build()
create_package()
check()
?install
install(force = TRUE)
?install
distmat
distdf <- as.data.frame(distmat)
data.table::setDT(distdf, keep.rownames = "id")
data
idcol
install()
install(force = TRUE)
?install
getwd()
load_all()
install(force = TRUE)
install()
dist
nn_id <- apply(dist, 1, function(x) { order(x, decreasing=F)[2] })
nn_id
apply(dist, 1, function(x) { order(x, decreasing=F)[2] })
apply(dist, 1, function(x) { order(x, decreasing=F)[1] })
apply(dist, 1, function(x) { order(x, decreasing=F)[c(1,2)] })
head(apply(dist, 1, function(x) { order(x, decreasing=F)[c(1,2)] }))
as.data.frame(apply(dist, 1, function(x) { order(x, decreasing=F)[c(1,2)] }))
View(apply(dist, 1, function(x) { order(x, decreasing=F)[c(1,2)] }))
View(apply(dist, 2, function(x) { order(x, decreasing=F)[c(1,2)] }))
nearestid <- function(dist){
apply(dist, 1, function(x) { order(x, decreasing=F)[2] })
}
nearestid(dist = dist)
class(dist)
class("dist")
nearestinds <- function(dist, x){
apply(dist, 1, function(x) { order(x, decreasing=F)[c(1:x)] })
}
nearestinds(dist = dist, x = 5)
nearestinds <- function(dist, n){
apply(dist, 1, function(x) { order(x, decreasing=F)[c(1:n)] })
}
nearestinds(dist = dist, n = 5)
View(nearestinds(dist = dist, n = 5))
nc <- (nearestinds(dist = dist, n = 5))
cbind(sa, nc)
cbind(sa, t(nc))
nearestinds <- function(dist, n){
nninds <- apply(dist, 1, function(x) { order(x, decreasing=F)[c(1:n)] })
t(nninds)
}
nearestinds(dist, 4)
order(dist, decreasing = FALSE)
seq(2,n)
n = 5
seq(1,n-1)
names(tnninds)
tnninds <- t(nninds)
nninds <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:n)] })
tnninds <- t(nninds)
names(tnninds)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:n)] })
as.data.frame(t(nns))
sprintf("nearest", seq(1,n-1))
paste0("nearest", seq(1,n-1))
c(2:NULL)
c(2:n+1)
n
c(2:(n+1))
n=2
c(2:(n+1))
seq(1,n-1)
seq(1,n)
?sort
nearestinds <- function(dist, n){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(t(nns))
names(nnsdf) <- paste0("nnids", seq(1,n))
}
nearestinds()
nearestinds(dist)
nearestinds(dist, n = 1)
c(2:(n+1))
n = 1
c(2:(n+1))
seq(1,n)
nearestinds <- function(dist, n){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(t(nns))
names(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestinds(dist, n = 1)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nns
as.data.frame(t(nns))
nnsdf <- as.data.frame(t(nns))
nnsdf
names(nnsdf)
colnames(nnsdf)
rownames(nnsdf)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(t(nns))
nnsdf <- as.data.frame(t(nns))
colnames(nnsdf)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(nns)
colnames(nnsdf)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
nnsdf
sa$glottocode[nnsdf]
class(nnsdf)
sa$glottocode[nnsdf$nnids1]
cbind(sa$glottocode, sa$glottocode[nnsdf$nnids1])
nearestinds <- function(dist, n){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestinds(3)
nearestinds(dist, 3)
nearestinds(dist = dist, 3)
dist
nearestinds(dist = dist, n = 3)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nns
n
n = 3
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
colnames(nnsdf)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(nns)
nnsdf
head(nnsdf)
as_tibble(nnsdf)
tibble::as_tibble(nnsdf)
nnsdf <- as.data.frame(t(nns))
tibble::as_tibble(nnsdf)
colnames(nnsdf)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
rownames(nnsdf)[nnids1]
rownames(nnsdf)[nnsdf$nnids1]
nnsdf$nngc1 <- rownames(nnsdf)[nnsdf$nnids1]
nnsdf$nngc2 <- rownames(nnsdf)[nnsdf$nnids2]
n = NULL
n
seq(1,n)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
nnddf <- as.data.frame(t(nnd))
colnames(nnddf) <- paste0("nndist", seq(1,n))
nnsdf
}
nearestdistance(dist = dist)
rm(nnsdf)
nearestdistance(dist = dist)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
nnddf <- as.data.frame(t(nnd))
colnames(nnddf) <- paste0("nndist", seq(1,n))
nnddf
}
nearestdistance(dist = dist)
n
n=1
nearestdistance(dist = dist)
n
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
nnd
nnddf <- as.data.frame(t(nnd))
nnddf
colnames(nnddf)
source('C:/Users/sjnor/surfdrive/PROJECTS_SN/SAPPHIRE/R/glottospace/R/geodist.R', echo=TRUE)
nnd
colnames(nnd)
nnd
colnames(nnd)
nnddf <- as.data.frame(t(nnd))
nnddf
colnames(nnddf)
rownames(nnddf)
nearestinds(dist = dist)
as.data.frame(t(nnd))
nnddf <- as.data.frame(t(nnd))
nnddf
colnames(nnddf)
nnd
nnddf <- as.data.frame(nnd)
nnddf
colnames(nnddf)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
nnddf
}
# Get indices of x nearest neighbors
nearestinds <- function(dist, n = 1){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestdistance(dist)
nearestinds(dist)
nearestinds(dist, n =2)
n
n=2
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
nnddf <- as.data.frame(nnd)
nnddf
colnames(nnddf)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
ifelse(n == 1, nnd <- t(nnd), nnd)
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
nnddf
}
# Get indices of x nearest neighbors
nearestinds <- function(dist, n = 1){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
ifelse(n == 1, nns <- t(nns), nns)
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestdistance(dist, 1)
nearestdistance(dist, 2)
n  = 1
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
ifelse(n == 1, nns <- t(nns), nns)
t(nns)
nns <- ifelse(n == 1, t(nns), nns)
nns
t(nns)
n == 1
t(nns)
?ifelse
t(nns)
nns
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nns
t(nns)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n == 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
n == 1
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n == 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
colnames(nnsdf)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n != 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
if(n != 1){nnd <- t(nnd)}
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
nnddf
}
# Get indices of x nearest neighbors
nearestinds <- function(dist, n = 1){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n != 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestdistance(dist, )
nearestdistance(dist, n = 3)
nearestinds(dist, n = 3)
nearestinds(dist, n = 1)
nearestdistance(dist, n = 3)
ind <- nearestinds(dist, n = 1)
ind
rownames(dist)
rownames(dist)[ind]
rownames(dist)[ind$nnids1]
cbind(rownames(dist)[ind$nnids1])
c(rownames(dist)[ind$nnids1])
c(rownames(dist)[ind$nnids1])
cbind(data$id[ind$nnids1])
rownames(dist)
rownames(ind)
rownames(ind)[ind$nnids1]
cbind(rownames(ind)[ind$nnids1])
data
cbind(data$id[ind$nnids1])
cbind(data$id, data$id[ind$nnids1])
ind
data.frame(point = rownames(ind), neighbor = rownames(ind)[ind$nnids1])
nearestind(dist, 4)
nearestind <- function(dist, n = 1){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n != 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestind(dist, 4)
cbind(rownames(ind),rownames(ind)[ind$nnids1])
class(ind)
countwithinradius <- function(dist, radius){
apply(geodist, 1, function(x) {
sum(x < radius) - 1 # Subtract 1 to exclude the point itself
})
}
countwithinradius(dist = dist, radius = 100)
countwithinradius <- function(dist, radius){
apply(dist, 1, function(x) {
sum(x < radius) - 1 # Subtract 1 to exclude the point itself
})
}
countwithinradius(dist = dist, radius = 100)
cwr <- countwithinradius(dist = dist, radius = 100)
class(cwr)
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) }) # start at 2, because 1 is the point itself.
nnd
class(nnd)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) }) # start at 2, because 1 is the point itself.
if(n ==1 ){
return(nnd)
} else if(n != 1){
nnd <- t(nnd)
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
return(nndf)
}
}
nearestdistance(dist = dist, n)
nearestdistance(dist = dist, n = 2)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) }) # start at 2, because 1 is the point itself.
if(n ==1 ){
return(nnd)
} else if(n != 1){
nnd <- t(nnd)
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
return(nnddf)
}
}
nearestdistance(dist = dist, n = 2)
meandist(dist)
class(meandist(dist))
document()
rm(list = c("countwithinradius", "gs_geodist", "meandist", "nearestdistance", "nearestline_bird", "pointdist_bird"))
document()
load_all)
load_all()
install(force = TRUE)
load_all()
install(force = TRUE)
library(purrr)
?is_empty
purrr::is_empty(data)
data
?substitute
!purrr::is_empty(as.character(expression))
!purrr::is_empty(data)
dplyr::filter(data, eval(expression))
dplyr::filter(glottodata, eval(expression))
document()
library(devtools)
document()
load_all()
build()
