nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
ifelse(n == 1, nnd <- t(nnd), nnd)
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
nnddf
}
# Get indices of x nearest neighbors
nearestinds <- function(dist, n = 1){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
ifelse(n == 1, nns <- t(nns), nns)
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestdistance(dist, 1)
nearestdistance(dist, 2)
n  = 1
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
ifelse(n == 1, nns <- t(nns), nns)
t(nns)
nns <- ifelse(n == 1, t(nns), nns)
nns
t(nns)
n == 1
t(nns)
?ifelse
t(nns)
nns
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
nns
t(nns)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n == 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
n == 1
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n == 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
colnames(nnsdf)
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n != 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) })
if(n != 1){nnd <- t(nnd)}
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
nnddf
}
# Get indices of x nearest neighbors
nearestinds <- function(dist, n = 1){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n != 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestdistance(dist, )
nearestdistance(dist, n = 3)
nearestinds(dist, n = 3)
nearestinds(dist, n = 1)
nearestdistance(dist, n = 3)
ind <- nearestinds(dist, n = 1)
ind
rownames(dist)
rownames(dist)[ind]
rownames(dist)[ind$nnids1]
cbind(rownames(dist)[ind$nnids1])
c(rownames(dist)[ind$nnids1])
c(rownames(dist)[ind$nnids1])
cbind(data$id[ind$nnids1])
rownames(dist)
rownames(ind)
rownames(ind)[ind$nnids1]
cbind(rownames(ind)[ind$nnids1])
data
cbind(data$id[ind$nnids1])
cbind(data$id, data$id[ind$nnids1])
ind
data.frame(point = rownames(ind), neighbor = rownames(ind)[ind$nnids1])
nearestind(dist, 4)
nearestind <- function(dist, n = 1){
nns <- apply(dist, 1, function(x) { order(x, decreasing=FALSE)[c(2:(n+1))] })
if(n != 1){nns <- t(nns)}
nnsdf <- as.data.frame(nns)
colnames(nnsdf) <- paste0("nnids", seq(1,n))
nnsdf
}
nearestind(dist, 4)
cbind(rownames(ind),rownames(ind)[ind$nnids1])
class(ind)
countwithinradius <- function(dist, radius){
apply(geodist, 1, function(x) {
sum(x < radius) - 1 # Subtract 1 to exclude the point itself
})
}
countwithinradius(dist = dist, radius = 100)
countwithinradius <- function(dist, radius){
apply(dist, 1, function(x) {
sum(x < radius) - 1 # Subtract 1 to exclude the point itself
})
}
countwithinradius(dist = dist, radius = 100)
cwr <- countwithinradius(dist = dist, radius = 100)
class(cwr)
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) }) # start at 2, because 1 is the point itself.
nnd
class(nnd)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) }) # start at 2, because 1 is the point itself.
if(n ==1 ){
return(nnd)
} else if(n != 1){
nnd <- t(nnd)
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
return(nndf)
}
}
nearestdistance(dist = dist, n)
nearestdistance(dist = dist, n = 2)
nearestdistance <- function(dist, n = 1){
nnd <- apply(dist, 1, function(x) { return(sort(x, partial = 2)[c(2:(n+1))]) }) # start at 2, because 1 is the point itself.
if(n ==1 ){
return(nnd)
} else if(n != 1){
nnd <- t(nnd)
nnddf <- as.data.frame(nnd)
colnames(nnddf) <- paste0("nndist", seq(1,n))
return(nnddf)
}
}
nearestdistance(dist = dist, n = 2)
meandist(dist)
class(meandist(dist))
document()
rm(list = c("countwithinradius", "gs_geodist", "meandist", "nearestdistance", "nearestline_bird", "pointdist_bird"))
document()
load_all)
load_all()
install(force = TRUE)
load_all()
install(force = TRUE)
library(purrr)
?is_empty
purrr::is_empty(data)
data
?substitute
!purrr::is_empty(as.character(expression))
!purrr::is_empty(data)
dplyr::filter(data, eval(expression))
dplyr::filter(glottodata, eval(expression))
document()
library(devtools)
document()
load_all()
build()
library(devtools)
document()
load_all()
?build
?glottofilter
build()
install()
library(sf)
?st_distance
library(gdistance)
?gdistance
?geoCorrection
r <- raster(nrows=6, ncols=7, xmn=0, xmx=7, ymn=0, ymx=6, crs="+proj=utm +units=m")
r[] <- c(2, 2, 1, 1, 5, 5, 5,
2, 2, 8, 8, 5, 2, 1,
7, 1, 1, 8, 2, 2, 2,
8, 7, 8, 8, 8, 8, 5,
8, 8, 1, 1, 5, 3, 9,
8, 1, 1, 2, 5, 3, 9)
r
plot(r)
?transition
tr <- transition(r, function(x) 1/mean(x), 8)
plot(tr)
tr
tr <- geoCorrection(tr)
tr
c1 <- c(5.5,1.5)
c2 <- c(1.5,5.5)
sPath1 <- shortestPath(tr, c1, c2, output="SpatialLines")
plot(r)
lines(sPath1)
sPath2 <- shortestPath(tr, c1, c2)
plot(raster(sPath2))
sPath2
sPath1
library(sf)
st_as_sf(sPath1)
line <- st_as_sf(sPath1)
length(line)
r <- raster(nrows=18, ncols=36)
r <- setValues(r,runif(ncell(r),0,1))
tr <- transition(r,function(x) 1/mean(x),8)
plot(r)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r,ncf,8, symm=FALSE)
tr2
tr
sP1 <- cbind(c(65,5,-65),c(55,35,-35))
sP2 <- cbind(c(50,15,-40),c(80,20,-5))
sP1
sP2
costDistance(tr,sP1)
costDistance(tr2,sP1)
?transition
path <- "C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolates/output/nwa.gpkg"
library(sf)
# path <- "C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolates/output/nwa.gpkg"
points <- st_read(path)
p <- points # check CRS identical
# ppath <- "C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolates/output/nwa.gpkg"
topopath <- "D:/Global/Topography/SRTM/250m/South America/SRTM250mSA.tif"
topography <- raster(topopath)
topography
raster(topography)
ts <- raster(topography)
ts
plot(ts)
plot(topography)
class(topography)
is_raster(topography)
glottospace::is_raster()
document()
is_raster
document()
is_raster
is_sf
is_raster(topography)
is_raster(topography)
points
p <- points # check CRS identical
tr <- transition(x = r, transitionFunction = function(x) 1/mean(x), directions = 8)
tr
gdistance::costDistance(x = tr, fromCoords = p)
?costDistance
as(x = p, Class = "Spatial")
p
as(p, Class = "Spatial")
?as
sf::as(p, Class = "Spatial")
as_Spatial(p)
p <- sf::as_Spatial(points)
p
gdistance::costDistance(x = tr, fromCoords = p)
points
points$family_size == 1
sum(points$family_size == 1)
points[points$family_size == 1, ]
?transition
points <- contransform_lonlat(points)
geodist <- sf::st_distance(x = points)
geodist <- geodist %>% units::set_units(km) # convert with set_units because geodist %>% "/"(1000) would not keep the correct units class
rownames(geodist) <- points[, label, drop = T]
colnames(geodist) <- points[, label, drop = T]
geodist <- round(geodist)
label = "glottocode"
points <- contransform_lonlat(points)
geodist <- sf::st_distance(x = points)
geodist <- geodist %>% units::set_units(km) # convert with set_units because geodist %>% "/"(1000) would not keep the correct units class
rownames(geodist) <- points[, label, drop = T]
colnames(geodist) <- points[, label, drop = T]
geodist <- round(geodist)
geodist
install.packages("topoDistance")
library(topoDistance)
?topoDistance
?topoDist
# Alternative
topoDist(DEM = r, pts = points, directions = 8, paths = FALSE, zweight = 1)
# Alternative
topoDist(DEM = r, pts = p, directions = 8, paths = FALSE, zweight = 1)
library(devtools)
load_all()
?glot_exists
?glottosearch
base_url <-  "https://zenodo.org/api/records/4762034"
req <- curl::curl_fetch_memory(base_url)
content <- RJSONIO::fromJSON(rawToChar(req$content))
title <- gsub(".*:", "", content$metadata$title)
title
# title <- gsub(".*:", "", content$metadata$title)
version <- content$metadata$version
version
# title <- gsub(".*:", "", content$metadata$title)
# version <- content$metadata$version
url <- content$files[[1]]$links[[1]]
url
cldfpath <- glottolog_download_cldf()
cldfpath
glottodata <- read_cldf(mdpath = cldfpath)
glottodata$tables$languages <- glottodata_spatial(glottodata = data$tables$languages,
lon = "Longitude", lat = "Latitude")
transition
gdistance::transition
UseMethod("gdistance::transition")
library(gdistance)
UseMethod("transition")
gdistance::transition
showMethods(transition)
getMethod(transition)
getMethod(f = transition, signature = "RasterBrick")
?new
?inherits
ppath <- "C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolates/output/nwa.gpkg"
topopath <- "D:/Global/Topography/SRTM/250m/South America/SRTM250mSA.tif"
points <- st_read(ppath)
pointdist_topo(points = points, topography = topopath)
points <- sf::st_read(ppath)
pointdist_topo(points = points, topography = topopath)
is_raster(topography)
topography = topopath
is_raster(topography)
topography
# TODO: check if path exists, and include try / tryCatch
r <- raster(topography) # assume it is a path
p <- sf::as_Spatial(points)
tr <- gdistance::transition(x = r, transitionFunction = function(x) 1/mean(x), directions = 8)
r
raster(r)
topoDist(DEM = r, pts = p, directions = 8, paths = FALSE, zweight = 1)
# Alternative
topodistance::topoDist(DEM = r, pts = p, directions = 8, paths = FALSE, zweight = 1)
# Alternative
topoDistance::topoDist(DEM = r, pts = p, directions = 8, paths = FALSE, zweight = 1)
packageVersion("raster")
tr <- gdistance::transition(x = topography, transitionFunction = function(x) 1/mean(x), directions = 8)
r <- raster(topography)
r
tr <- gdistance::transition(x = r, transitionFunction = mean, directions = 8)
?raster
?transition
gc()
tr <- gdistance::transition(x = r, transitionFunction = mean, directions = 8)
View(r)
r <- raster(r)
r
tr <- gdistance::transition(x = r, transitionFunction = mean, directions = 8)
plot(r)
topopath <- "D:/Global/Topography/SRTM/250m/South America/SRTM250mSA.tif"
topography = topopath
plot(topography)
topography
rm(r)
# TODO: check if path exists, and include try / tryCatch
r <- raster(topography) # assume it is a path
plot(r)
gdistance::transition(x = r, transitionFunction = mean, directions = 8)
?rasterOptions
ppath <- "C:/Users/sjnor/surfdrive/Projecten en schrijfsels/Papers in progress/Isolates/output/nwa.gpkg"
topopath <- "D:/Global/Topography/SRTM/250m/South America/SRTM250mSA.tif"
points <- sf::st_read(ppath)
points <- points[c(1:3),]
# TODO: check if path exists, and include try / tryCatch
r <- raster::raster(topography) # assume it is a path
topography = topopath
# TODO: check if path exists, and include try / tryCatch
r <- raster::raster(topography) # assume it is a path
points <- points[c(1:3),]
points
p <- sf::as_Spatial(points)
p
r <- raster::crop(r, p) # added to reduce memory usage. TODO: see suggestions here: https://discuss.ropensci.org/t/how-to-avoid-space-hogging-raster-tempfiles/864
tr <- gdistance::transition(x = r, transitionFunction = mean, directions = 8)
tr
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = tr, fromCoords = p)
p <- sf::as_Spatial(points)
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = tr, fromCoords = p)
p
tr
points <- sf::st_read(ppath)
points <- points[c(1:3),] # for testing only
p <- sf::as_Spatial(points)
r <- raster::crop(r, p) # added to reduce memory usage. TODO: see suggestions here: https://discuss.ropensci.org/t/how-to-avoid-space-hogging-raster-tempfiles/864
r
tr <- gdistance::transition(x = r, transitionFunction = mean, directions = 8)
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = tr, fromCoords = p)
extent(r)
raster::extent(r)
raster::extent(p)
plot(r)
r
image(r)
plot(r)
# TODO: check if path exists, and include try / tryCatch
r <- raster::raster(topography) # assume it is a path
rc <- raster::crop(r, p) # added to reduce memory usage. TODO: see suggestions here: https://discuss.ropensci.org/t/how-to-avoid-space-hogging-raster-tempfiles/864
plot(rc)
raster::extent(p)
e <- raster::extent(p)
rc <- raster::crop(r, e) # added to reduce memory usage. TODO: see suggestions here: https://discuss.ropensci.org/t/how-to-avoid-space-hogging-raster-tempfiles/86
plot(rc)
raster::plot(rc)
raster::plot(p, add = TRUE)
geodist <- gdistance::costDistance(x = tr, fromCoords = p)
e <- raster::extent(p)
e
e{1}
e[1]
raster::expand
raster::extend(e)
?extent
extent(c(-71, -70, 1, 1))
raster::extent(c(-71, -70, 1, 1))
e <- raster::extent(c(-71, -70, 1, 1))
e <- raster::extent(p)
rc <- raster::crop(r, e) # added to reduce memory usage. TODO: see suggestions here: https://discuss.ropensci.org/t/how-to-avoid-space-hogging-raster-tempfiles/864
tr <- gdistance::transition(x = rc, transitionFunction = mean, directions = 8)
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = tr, fromCoords = p)
geodist
?costDistance
p
points
geodist
# Alternative
topoDistance::topoDist(DEM = r, pts = p, directions = 8, paths = FALSE, zweight = 1)
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = tr, fromCoords = p)
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = tr, fromCoords = p, toCoords = p)
geodist
image(tr)
image(geodist)
raster::plot(rc)
raster::plot(geodist)
raster::plot(rc)
plot(raster(tr), main = "raster(tr3)", xlab = "Longitude (degrees)", + ylab = "Latitude (degrees)")
plot(raster(tr), main = "raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
plot(raster::raster(tr), main = "raster(tr3)", xlab = "Longitude (degrees)", ylab = "Latitude (degrees)")
raster::plot(tr)
gdistance::geoCorrection()
?gdistance::geoCorrection
?isLonLat
trc <- geoCorrection(tr, type = "c", multpl = FALSE, scl = TRUE)
trc <- gdistance::geoCorrection(tr, type = "c")
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = trc, fromCoords = p, toCoords = p)
p
# should be saved in temporary directory?
geodist <- gdistance::costDistance(x = trc, fromCoords = p, toCoords = p)
geodist
# TODO: check if path exists, and include try / tryCatch
r <- raster::raster(topography, package = "gdistance") # assume it is a path
r
altDiff <- function(x) x[2] - x[1]
hd <- transition(rc, altDiff, 8, symm= FALSE)
hd <- gdistance::transition(rc, altDiff, 8, symm= FALSE)
slope <- geoCorrection(hd)
slope <- gdistance::geoCorrection(hd)
adj <- gdistance::adjacent(r, cells = 1:ncell(r), pairs = TRUE, directions = 8)
adj <- raster::adjacent(r, cells = 1:ncell(r), pairs = TRUE, directions = 8)
adj <- raster::adjacent(rc, cells = 1:ncell(rc), pairs = TRUE, directions = 8)
ncell(rc)
adj <- raster::adjacent(rc, cells = 1:raster::ncell(rc), pairs = TRUE, directions = 8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05))
speed
conductance <- gdistance::geoCorrection(speed)
conductance
points[1]
points[[1]]
points[1,]
AtoB <- shortestPath(Conductance, points[1,], points[2,], output = "SpatialLines")
AtoB <- gdistance::shortestPath(Conductance, points[1,], points[2,], output = "SpatialLines")
AtoB <- gdistance::shortestPath(conductance, points[1,], points[2,], output = "SpatialLines")
AtoB <- gdistance::shortestPath(conductance, p[1,], p[2,], output = "SpatialLines")
BtoA <- gdistance::shortestPath(conductance, p[2,], p[1,], output = "SpatialLines")
AtoB
method(shortestPath)
shortestPath
gdistance::shortestPath
showMethods(gdistance::shortestPath)
methods(gdistance::shortestPath, "TransitionLayer")
getMethod(gdistance::shortestPath, "TransitionLayer")
getMethod(shortestPath, "TransitionLayer")
library(gdistance)
getMethod(shortestPath, "TransitionLayer")
AtoB <- gdistance::shortestPath(conductance, p[1,], p[2,], output = "SpatialLines")
p[1,]
sf::st_geometry(points)
points <- sf::st_geometry(points)
points
p <- sf::as_Spatial(points)
AtoB <- gdistance::shortestPath(conductance, p[1,], p[2,], output = "SpatialLines")
?shortest_paths
?shortestPath
raster::plot(speed)
# Alternative
topoDistance::topoDist(DEM = rc, pts = p, directions = 8, paths = FALSE, zweight = 1)
p
points <- sf::st_read(ppath)
points <- sf::st_geometry(points)
points <- points[c(1:10),] # for testing only
p <- sf::as_Spatial(points)
rc <- raster::crop(r, p) # added to reduce memory usage. TODO: see suggestions here: https://discuss.ropensci.org/t/how-to-avoid-space-hogging-raster-tempfiles/864
# Alternative
geodist <- topoDistance::topoDist(DEM = rc, pts = p, directions = 8, paths = FALSE, zweight = 1)
