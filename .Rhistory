utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
destdir
cldf_md <- base::normalizePath(base::list.files(destdir, pattern = "cldf-metadata.json", recursive = TRUE), mustWork = FALSE)
cldfpath <- stringr::str_remove(cldf_md, "cldf-metadata.json")
cldfpath
cldf_md
destdir
list.files(destdir, pattern = "cldf-metadata.json", recursive = TRUE)
cldf_md <- base::list.files(destdir, pattern = "cldf-metadata.json", recursive = TRUE)
cldf_md
cldf_md
stringr::str_remove(cldf_md, "cldf-metadata.json")
destdir
stringr::str_remove(cldf_md, "cldf-metadata.json")
normalizePath(destdir)
normalizePath(destdir, winslash = "/", mustWork = FALSE)
cldfpath <- paste0(normalizePath(destdir, winslash = "/", mustWork = FALSE),
stringr::str_remove(cldf_md, "cldf-metadata.json") )
cldfpath
cldfpath <- paste0(normalizePath(destdir, winslash = "/", mustWork = FALSE),
normalizePath(stringr::str_remove(cldf_md, "cldf-metadata.json") ), winslash = "/", mustWork = FALSE)
stringr::str_remove(cldf_md, "cldf-metadata.json")
normalizePath(stringr::str_remove(cldf_md, "cldf-metadata.json"), winslash = "/", mustWork = FALSE)
cldfpath <- paste0(normalizePath(destdir, winslash = "/", mustWork = FALSE),
stringr::str_remove(cldf_md, "cldf-metadata.json") )
cldfpath
destdir
glottolog_download_cldf <- function(destdir = tempdir()){
base_url <-  "https://zenodo.org/api/records/4762034"
req <- curl::curl_fetch_memory(base_url)
content <- RJSONIO::fromJSON(rawToChar(req$content))
# title <- gsub(".*:", "", content$metadata$title)
# version <- content$metadata$version
url <- content$files[[1]]$links[[1]]
filename <- base::basename(url)
tmpfile <- paste(base::tempfile(), '_cldf', sep='')
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
cldf_md <- base::list.files(destdir, pattern = "cldf-metadata.json", recursive = TRUE)
cldfpath <- paste0(normalizePath(destdir, winslash = "/", mustWork = FALSE),
stringr::str_remove(cldf_md, "cldf-metadata.json") )
return(cldfpath)
}
d <- glottolog_download_cldf()
d
d <- read_cldf(mdpath = glottolog_download_cldf())
d <- read_cldf(mdpath = d)
paste(normalizePath(destdir, winslash = "/", mustWork = FALSE),
stringr::str_remove(cldf_md, "cldf-metadata.json"), sep = "/" )
glottolog_download_cldf <- function(destdir = tempdir()){
base_url <-  "https://zenodo.org/api/records/4762034"
req <- curl::curl_fetch_memory(base_url)
content <- RJSONIO::fromJSON(rawToChar(req$content))
# title <- gsub(".*:", "", content$metadata$title)
# version <- content$metadata$version
url <- content$files[[1]]$links[[1]]
filename <- base::basename(url)
tmpfile <- paste(base::tempfile(), '_cldf', sep='')
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
cldf_md <- base::list.files(destdir, pattern = "cldf-metadata.json", recursive = TRUE)
cldfpath <- paste(normalizePath(destdir, winslash = "/", mustWork = FALSE),
stringr::str_remove(cldf_md, "cldf-metadata.json"), sep = "/" )
return(cldfpath)
}
cldfpath <- glottolog_download_cldf()
d <- read_cldf(mdpath = cldfpath)
data <- d$tables$languages
data
d
cldfpath <- glottolog_download_cldf()
d <- read_cldf(mdpath = cldfpath)
d$tables$languages <- glottodata_spatial(glottologdata = d$tables$languages)
cldfpath <- glottolog_download_cldf()
d <- read_cldf(mdpath = cldfpath)
d
glottodata_spatial(glottologdata = d$tables$languages)
d$tables$languages
data
glottolog_download <- function(){
# FIXME: Now URL is fixed, which means that it doesn't update when newer version of glottolog becomes available.
# TODO: try other URL if first one fails.
# https://stackoverflow.com/questions/12193779/how-to-write-trycatch-in-r
# from glottolog website or from zenodo.
# https://github.com/cran/raster/blob/master/R/getData.R
# https://rdrr.io/github/inbo/inborutils/src/R/download_zenodo.R
base_url <- "https://cdstar.shh.mpg.de/bitstreams/EAEA0-E62D-ED67-FD05-0/"
filename <- "glottolog_languoid.csv.zip"
url <- paste0(base_url, filename)
if(!base::file.exists(filename)){
utils::download.file(url = url, destfile = filename)}
data <- utils::read.csv(unz(filename, "languoid.csv"), header = TRUE)
}
gweb <- glottolog_download()
gweb
head(gweb)
head(data)
data$Family_ID
glottologdata <- glottolog_download(version = "glottolog")
glottologdata <- glottolog_download()
glottologlatlon <- glottologdata %>%
dplyr::filter(!is.na(latitude)) %>%
dplyr::filter(!is.na(longitude))
glottologlatlon <- glottologdata %>%
dplyr::filter(!is.na(latitude)) %>%
dplyr::filter(!is.na("longitude"))
lon = "longitude"
lat = "latitude"
glottologlatlon <- glottologdata %>%
dplyr::filter(!is.na(lon)) %>%
dplyr::filter(!is.na(lat))
glottologlatlon
glottodata_spatial <- function(glottologdata = NULL, lon = "longitude", lat = "latitude"){
if(is.null(glottologdata)){
glottologdata <- glottolog_download()
cat("No input data provided, glottolog data downloaded")
}
glottologlatlon <- glottologdata %>%
dplyr::filter(!is.na(lon)) %>%
dplyr::filter(!is.na(lat))
data <- sf::st_as_sf(x = as.data.frame(glottologlatlon),
coords = c(lon, lat),
crs = 4326) #https://epsg.io/4326
}
cldfpath <- glottolog_download_cldf()
d <- read_cldf(mdpath = cldfpath)
d$tables$languages <- glottodata_spatial(glottologdata = d$tables$languages, lon = "Longitude", lat = "Latitude")
d$tables$languages
load_all()
d$tables$languages <- glottodata_spatial(glottologdata = d$tables$languages, lon = "Longitude", lat = "Latitude")
glottologdata <- d$tables$languages
glottologdata
lon
lon = "Longitude"
lat = "Latitude"
glottologlatlon <- glottologdata %>%
dplyr::filter(!is.na(lon)) %>%
dplyr::filter(!is.na(lat))
data <- sf::st_as_sf(x = as.data.frame(glottologlatlon),
coords = c(lon, lat),
crs = 4326) #https://epsg.io/4326
glottologlatlon
lon
glottologdata %>%
dplyr::filter(!is.na(lon))
glottologdata %>%
dplyr::filter(!is.na(Longitude))
glottologdata %>%
dplyr::filter(!is.na("Longitude"))
glottologdata %>%
dplyr::filter(!is.na(!!as.symbol(lon)))
glottologdata %>%
dplyr::filter(!is.na(as.symbol(lon)))
glottologdata %>%
dplyr::filter(!is.na(!!as.symbol(lon))) %>%
dplyr::filter(!is.na(!!as.symbollat)))
glottologdata %>%
dplyr::filter(!is.na(!!as.symbol(lon))) %>%
dplyr::filter(!is.na(!!as.symbol(lat)))
glottodata_spatial <- function(glottologdata = NULL, lon = "longitude", lat = "latitude"){
if(is.null(glottologdata)){
glottologdata <- glottolog_download()
cat("No input data provided, glottolog data downloaded")
}
glottologlatlon <- glottologdata %>%
dplyr::filter(!is.na(!!as.symbol(lon))) %>%
dplyr::filter(!is.na(!!as.symbol(lat)))
data <- sf::st_as_sf(x = as.data.frame(glottologlatlon),
coords = c(lon, lat),
crs = 4326) #https://epsg.io/4326
}
cldfpath <- glottolog_download_cldf()
d <- read_cldf(mdpath = cldfpath)
d$tables$languages <- glottodata_spatial(glottologdata = d$tables$languages, lon = "Longitude", lat = "Latitude")
d$tables$languages
file.exists("ga")
library(RCurl)
url.exists("www.sietzenorder.nl")
install.packages("httr")
library(httr)
GET("www.sietzenorder.nl")
?GET
GET("www.sietzenorder.nld")
tryCatch(GET("www.sietzenorder.nld"))
trycatch(GET("www.sietzenorder.nld"))
?tryCatch
trycatch(httr::GET("www.sietzenorder.nld"))
tryCatch(httr::GET("www.sietzenorder.nld"))
tryCatch(httr::GET("www.sietzenorder.nld"), finally = print("Hello"))
try(httr::GET("www.sietzenorder.nld"))
try(httr::GET("www.sietzenorder.nld"), silent = TRUE)
tryCatch(httr::GET("www.sietzenorder.nld"), silent = TRUE)
try(httr::GET("www.sietzenorder.nld"), TRUE)
x <- try(httr::GET("www.sietzenorder.nld"), TRUE)
x
mod2 <- try(httr::GET("www.sietzenorder.nld"), TRUE)
isTRUE(class(mod2)=="try-error")
file.exists(data)
tools::file_ext("abc.csv")
tools::file_ext("abc.csv.zip")
data
mod2 <- try(httr::GET(data), TRUE)
isTRUE(class(mod2)=="try-error")
mod2 <- try(httr::GET("www.sietzenorder.nl"), TRUE)
isTRUE(class(mod2)=="try-error")
urlcorrect <- try(httr::GET(data), TRUE)
isTRUE(class(urlcorrect)=="try-error")
urlcorrect <- try(httr::GET(data), FALSE)
urlerror <- try(httr::GET(data), TRUE)
urlerror <- try(httr::GET(data), TRUE)
isTRUE(class(urlerror)=="try-error")
urlerror <- try(httr::GET(www.sietzenorder.nl), TRUE)
isTRUE(class(urlerror)=="try-error")
urlerror <- try(httr::GET("www.sietzenorder.nl"), TRUE)
isTRUE(class(urlerror)=="try-error")
class(urlerror)
urltry <- try(httr::GET(data), TRUE)
class(urltry)
urltry <- try(httr::GET(data))
?try
try(httr::GET(data), TRUE)
class(try(httr::GET(data), TRUE))
class(try(httr::GET(data), TRUE)) == "response"
base_url
# https://github.com/cran/raster/blob/master/R/getData.R
# https://rdrr.io/github/inbo/inborutils/src/R/download_zenodo.R
base_url <- "https://cdstar.shh.mpg.de/bitstreams/EAEA0-E62D-ED67-FD05-0/"
class(try(httr::GET(base_url), TRUE)) == "response"
document()
load_all()
rm(list = c("get_spec", "get_table_schema", "get_tablename", "glottodata_spatial", "glottolog_download", "glottolog_download_cldf", "read_bib", "read_cldf", "resolve_path"))
load_all()
d <- glottodata()
d
d <- glottodata(data = "glottodata_")
d <- glottodata(data = "glottodata_cldf")
base_url <-  "https://zenodo.org/api/records/4762034"
req <- curl::curl_fetch_memory(base_url)
content <- RJSONIO::fromJSON(rawToChar(req$content))
# title <- gsub(".*:", "", content$metadata$title)
# version <- content$metadata$version
url <- content$files[[1]]$links[[1]]
filename <- base::basename(url)
filename
# filename <- base::basename(url)
tmpfile <- paste(base::tempfile(), '_cldf', sep='')
tmpfile
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
destdir
tmpfile
destdir <- paste0(destdir, "\\test")
destdir
utils::unzip(zipfile = tmpfile, exdir = destdir)
?tempdir
tempfile(pattern = "cldf", tmpdir = destdir)
destdir = tempdir()
tempfile(pattern = "cldf", tmpdir = destdir)
# filename <- base::basename(url)
tmpfile <- tempfile(pattern = "cldf_", tmpdir = destdir)
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
destdir
tempdir
destdir
tmpfile
# filename <- base::basename(url)
tmpfile <- tempfile(pattern = "cldf_")
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
# filename <- base::basename(url)
tmpfile <- tempfile(pattern = "cldf_", tmpdir = destdir)
tmpfile
paste0(tempdir(),"cldf")
destdir <- paste0(tempdir(),"_cldf")
tmpfile <- tempfile(pattern = "cldf_", tmpdir = destdir)
tmpfile
destdir <- paste0("cldf_", tempdir())
tmpfile <- tempfile(pattern = "cldf_", tmpdir = destdir)
tmpfile
destdir
destdir <- paste0(tempdir(), "_cldf")
destdir
tmpfile <- tempfile(pattern = "cldf_", tmpdir = destdir)
utils::download.file(url = url, destfile = tmpfile )
tmpfile <- tempfile(tmpdir = destdir)
tmpfile
utils::download.file(url = url, destfile = tmpfile )
utils::download.file(url = url, destfile = tempfile(tmpdir = destdir) )
destdir <- tempdir()
destdir
tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = tempfile(tmpdir = destdir) )
tmpfile
destdir
utils::unzip(zipfile = tmpfile, exdir = destdir)
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
destdir
destdir
normalizePath(destdir, winslash = "/", mustWork = FALSE)
# filename <- base::basename(url)
destdir <- normalizePath(destdir, winslash = "/", mustWork = FALSE)
tmpfile <- tempfile(tmpdir = destdir)
tmpfile
destdir = tempdir()
# filename <- base::basename(url)
destdir <- normalizePath(destdir, winslash = "/", mustWork = FALSE)
destdir
filename <- base::basename(url)
filename
# tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = paste(destdir, filename, sep = "/") )
destfile <- paste(destdir, filename, sep = "/")
# tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = destfile )
tmpfile <- paste(destdir, filename, sep = "/")
tmpfile <- paste(destdir, filename, sep = "/")
# tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
zipfile <- tempfile()
# tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = zipfile )
zipfile
tmpfile <- tempfile()
# tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
destdir
paste0(destdir,"/bla")
destdir <- paste0(destdir,"/bla")
utils::unzip(zipfile = tmpfile, exdir = destdir)
# filename <- base::basename(url)
destdir <- paste0(normalizePath(destdir, winslash = "/", mustWork = FALSE), "/cldf")
destdir
destdir = tempdir()
# filename <- base::basename(url)
destdir <- paste0(normalizePath(destdir, winslash = "/", mustWork = FALSE), "/cldf")
tmpfile <- tempfile()
tmpfile
destdir
# tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
cldf_md <- base::list.files(destdir, pattern = "cldf-metadata.json", recursive = TRUE)
cldfpath <- paste(destdir,
stringr::str_remove(cldf_md, "cldf-metadata.json"), sep = "/" )
cldfpath
glottolog_download_cldf <- function(destdir = tempdir()){
base_url <-  "https://zenodo.org/api/records/4762034"
req <- curl::curl_fetch_memory(base_url)
content <- RJSONIO::fromJSON(rawToChar(req$content))
# title <- gsub(".*:", "", content$metadata$title)
# version <- content$metadata$version
url <- content$files[[1]]$links[[1]]
# filename <- base::basename(url)
destdir <- paste0(normalizePath(destdir, winslash = "/", mustWork = FALSE), "/cldf")
tmpfile <- tempfile()
# tmpfile <- tempfile(tmpdir = destdir)
utils::download.file(url = url, destfile = tmpfile )
utils::unzip(zipfile = tmpfile, exdir = destdir)
cldf_md <- base::list.files(destdir, pattern = "cldf-metadata.json", recursive = TRUE)
cldfpath <- paste(destdir,
stringr::str_remove(cldf_md, "cldf-metadata.json"), sep = "/" )
return(cldfpath)
}
cldfpath <- glottolog_download_cldf()
cldfpath
data <- read_cldf(mdpath = cldfpath)
load_all()
rm(list = c("glottolog_download_cldf"))
data <- glottodata()
data
exists(data)
is.null(glottodata)
glottodata <- NULL
is.null(glottodata)
glottodata
exists(glottodata)
load_all()
exists(glottodata)
glottodata
rm(list = ls())
glottodata
exists(glottodata)
exists("glottodata")
glottodata <- glottodata()
glottodata <- getglottodata()
exists("glottodata")
base::exists("glottodata")
is.null(glottodata)
glottodata <- NULL
is.null(glottodata)
base::exists("glottodata")
glottodata
?is.null
glottodata_exists <- function(){
if(!base::exists("glottodata") | base::is.null(glottodata) ){
glottodata <- getglottodata()
message("No input data provided, glottolog data downloaded")
}
}
glottodata_exists()
glottodata_exists <- function(){
if(!base::exists("glottodata") | base::is.null(glottodata) ){
glottodata <- getglottodata()
message("No input data provided, glottolog data downloaded")
return(glottodata)
}
}
glottodata
glottodata
glottodata <- glottodata()
glottodata <- getglottodata()
glottodata
glottodata %>% tidyr::filter(level != dialects)
glottodata %>% dplyr::filter(level != dialects)
glottodata %>% dplyr::filter(level != dialect)
glottodata$level
glottodata %>% dplyr::filter(level != "dialect")
?drop
rmdialects <- function(glottodata){
glottodata %>% dplyr::filter(level != "dialect")
glottodata
}
glottodata <- glottodata %>% dplyr::filter(level != "dialect")
glottodata
glottodata <- glottodata %>% dplyr::filter(level != "dialect")
glottodata$level
as.factor(glottodata$level)
glottodata %>% dplyr::filter(bookkeeping == TRUE)
glottodata %>% dplyr::filter(bookkeeping == TRUE)
glottodata$bookkeeping
as.logical(glottodata$bookkeeping)
glottodata$bookkeeping <- as.logical(glottodata$bookkeeping)
dplyr::filter(bookkeeping == TRUE)
glottodata %>% dplyr::filter(bookkeeping == TRUE)
glottodata %>% dplyr::filter(level != "dialect")
glottodata
load_all
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
glottodata <- get_glottolog()
library(data.table)
?getDTthreads
#' @importFrom data.table %like%
glottodata$name
head(glottodata)
glottodata <- get_glottolog()
glottodata
glottodata <- get_glottolog("glottolog")
glottodata
glottodata <- get_glottolog("glottolog")
library(devtools)
load_all()
document()
document()
load_all()
glottodata <- get_glottolog("glottolog")
glottodata$name %like% "yucuna"
glottodata
load_all()
glottodata$name %like% "yucuna"
glottodata <- get_glottolog("glottolog")
glottodata$name %like% "yucuna"
glottodata$name[glottodata$name %like% "yucuna"]
glottodata$name
glottodata$name[glottodata$name %like% "Apa"]
glottodata$name[glottodata$name %like% "Yucu"]
glottodata$name[glottodata$name %like% "yucuna"]
glottodata$name[glottodata$name %like% "Yucuna"]
glottodata$name[glottodata$name %like% "Yukuna"]
agrep("Yucuna",glottodata$name,ignore.case=T,value=T,max.distance = 0.1, useBytes = FALSE)
?agrep
agrep("Yucuna",glottodata$name,ignore.case=T,value=T,max.distance = 0.2, useBytes = FALSE)
agrep("Yucuna",glottodata$name,ignore.case=T,value=T,max.distance = 0.1, useBytes = FALSE)
glottodata[,c("name","glottocode"]
glottodata[,c("name","glottocode")]
head(glottodata)
glottodata[,c("name","id")]
agrep("Yucuna",glottodata[,c("name","id")],ignore.case=T,value=T,max.distance = 0.1, useBytes = FALSE)
?apply
apply(glottodata, margin = 2, simplify = FALSE, FUN = agrep, pattern = "Yucuna", ignore.case = T, value = T, max.distance = 0.1, useBytes = FALSE)
apply(glottodata, MARGIN = 2, simplify = FALSE, FUN = agrep, pattern = "Yucuna", ignore.case = T, value = T, max.distance = 0.1, useBytes = FALSE)
?agrep
agrep("Yucuna",glottodata$name,ignore.case=T,value=FALSE,max.distance = 0.1, useBytes = FALSE)
rowid <- agrep("Yucuna",glottodata$name,ignore.case=T,value=FALSE,max.distance = 0.1)
glottodata[rowid, ]
rowid <- agrep("Yucuna",glottodata$name,ignore.case=T,value=FALSE,max.distance = 0.1, simplify = FALSE)
rowid
found <- apply(glottodata, MARGIN = 2, simplify = FALSE, FUN = agrep, pattern = "Yucuna", ignore.case = T, value = FALSE, max.distance = 0.1)
found
find <- "Yukuna"
found <- apply(glottodata, MARGIN = 2, simplify = FALSE, FUN = agrep, pattern = "yucu1254", ignore.case = T, value = FALSE, max.distance = 0.1)
found
found
sjmisc::is_empty(found)
document
document()
load_all()
sjmisc::is_empty(found)
sjmisc::is_empty(found)
lapply(found, sjmisc::is_empty)
lapply(found, !sjmisc::is_empty)
lapply(found, sjmisc::!is_empty)
class(found)
