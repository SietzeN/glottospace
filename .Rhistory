plotly::plot_ly(data = scoresdata, x = ~NMDS1, y = ~NMDS2, z = ~NMDS3,
type="scatter3d", mode="markers", color = ~.data[[colorby]],
hoverinfo = "text",
text = ~.data[[labelby]])
plotly::plot_ly(data = scoresdata, x = ~NMDS1, y = ~NMDS2, z = ~NMDS3,
type="scatter3d", mode="markers", color = ~.data[[colorby]],
hoverinfo = "text",
text = {if(!is.null(labelby))~.data[[labelby]]})
plotly::plot_ly(data = scoresdata, x = ~NMDS1, y = ~NMDS2, z = ~NMDS3,
type="scatter3d", mode="markers",
color = {if(!is.null(colorby))~.data[[colorby]]},
size = {if(!is.null(sizeby))~.data[[sizeby]]},
hoverinfo = "text",
text = {if(!is.null(labelby))~.data[[labelby]]})
sizeby = "isolate"
plotly::plot_ly(data = scoresdata, x = ~NMDS1, y = ~NMDS2, z = ~NMDS3,
type="scatter3d", mode="markers",
color = {if(!is.null(colorby))~.data[[colorby]]},
size = {if(!is.null(sizeby))~.data[[sizeby]]},
hoverinfo = "text",
text = {if(!is.null(labelby))~.data[[labelby]]})
numeric(scoresdata$isolate)
as.numeric(scoresdata$isolate)
sizeby <- as.numeric(scoresdata$isolate)
plotly::plot_ly(data = scoresdata, x = ~NMDS1, y = ~NMDS2, z = ~NMDS3,
type="scatter3d", mode="markers",
color = {if(!is.null(colorby))~.data[[colorby]]},
size = {if(!is.null(sizeby))~.data[[sizeby]]},
hoverinfo = "text",
text = {if(!is.null(labelby))~.data[[labelby]]})
sizeby = NULL
ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
{if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
nmds <- nmds(dist = dist, k = 2)
scores <- nmds_scores(nmds)
glottodata <- glottofilter(glottodata = get_glottobase(), glottocode = scores$glottocode)
scoresdata <- join_glottodata(data = scores, glottodata = glottodata)
load_all()
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
{if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
?ggplot2::stat_ellipse
ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
# {if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
colorby = "family_size_rank"
ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
# {if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
colorby = "isolate"
ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
# {if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
# {if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
# ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
document()
load_all()
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
nmds$ndim
load_all()
nmds
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
p <- plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
p
nmdsplot <- ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
# {if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
nmdsplot
nmdsplot <- ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
# {if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
print(nmdsplot)
nmdsplotx <- ggplot2::ggplot(data = scoresdata, ggplot2::aes_string(x="NMDS1",y="NMDS2", col = colorby, size = sizeby)) +
ggplot2::geom_point() +
{if(!is.null(labelby))ggplot2::geom_text(ggplot2::aes_string(label = labelby), hjust = 0, vjust = 0, show.legend = FALSE)} +
# {if(ellipse)ggplot2::stat_ellipse(type="t", level = 0.95, show.legend = FALSE, alpha = 0.5, size = 0.75, linetype = 2)} +
ggplot2::coord_equal()+
ggplot2::labs(title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"), x = "NMDS1", y = "NMDS2") +
ggplot2::theme_bw()
plot(c(1,2), 1:3)
plot(c(1,2), 1:2)
print(nmdsplotx)
load_all()
plot(c(1,2), 1:2)
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate", labelby = "family_name")
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
#' nmds <- nmds(dist = dist, k = 3)
scores <- nmds_scores(nmds)
glottodata <- glottofilter(glottodata = get_glottobase(), glottocode = scores$glottocode)
scoresdata <- join_glottodata(data = scores, glottodata = glottodata)
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
nmds
nmds <- nmds(dist = dist, k = 3)
nmds
scores <- nmds_scores(nmds)
glottodata <- glottofilter(glottodata = get_glottobase(), glottocode = scores$glottocode)
scoresdata <- join_glottodata(data = scores, glottodata = glottodata)
plotnmds(nmds = nmds, scoresdata = scoresdata, colorby = "family_name", sizeby = "isolate")
nmdsplot <- plotly::plot_ly(data = scoresdata, x = ~NMDS1, y = ~NMDS2, z = ~NMDS3,
type="scatter3d", mode="markers",
color = {if(!is.null(colorby))~.data[[colorby]]},
size = {if(!is.null(sizeby))~.data[[sizeby]]},
hoverinfo = "text",
text = {if(!is.null(labelby))~.data[[labelby]]})
nmdsplot <- nmdsplot %>% layout(
title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"),
scene = list(
xaxis = list(title = "NMDS1"),
yaxis = list(title = "NMDS2"),
zaxis = list(title = "NMDS3")
))
nmds$ndim
nmdsplot %>% plotly::layout(
title = paste0("NMDS (k = ", nmds$ndim, ", stress = ", round(nmds$stress, 2), ")"),
scene = list(
xaxis = list(title = "NMDS1"),
yaxis = list(title = "NMDS2"),
zaxis = list(title = "NMDS3")
))
scores <- nmds_scores(nmds)
scoresdata <- join_glottodata(data = scores, glottodata = get_glottobase())
install()
path <- "D:/Global/Societal/travel time/travel_time_to_cities_1.tif"
library(devtools)
document()
load_all()
path
get_geodata(path)
rasvec <- get_geodata(path)
plot(rasvec)
rasvec
raster::plot(rasvec)
glottobase
glottologbooster(glottologdata = glottobase)
gb <- glottologbooster(glottologdata = glottobase)
gb
glottofilter(glottodata = gb, continent = "South America")
path
rasvec
load_all()
extract_rasterpoints(glottopoints = gbsa, geodata = rasvec, radius = 10, mean)
extract_rasterpoints(glottopoints = gbsa, geodata = rasvec, radius = 10, fun = mean)
load_all()
extract_rasterpoints(glottopoints = gbsa, geodata = rasvec, radius = 10, fun = mean)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
extract_rasterpoints(glottopoints = gbsa, geodata = rasvec, radius = 10, fun = mean)
gbsa
load_all()
glot2geoglot(gbsa)
extract_rasterpoints(glottopoints = gbsa, geodata = rasvec, radius = 10, fun = mean)
?raster::extract
glottopoints
gbsa
gbsa <- glot2geoglot(gbsa)
gbsa
extract_rasterpoints(glottopoints = gbsa, geodata = rasvec, radius = 10, fun = mean)
gbsa
gbsa
sf::st_geometry(gbsa)
sf::st_geometry_type(gbsa)
unique(sf::st_geometry_type(gbsa))
all(sf::st_geometry_type(gbsa))
unique(sf::st_geometry_type(gbsa))
all(unique(sf::st_geometry_type(gbsa)) == "POINT"
)
gbsa
gbsa[,1:3]
gbsa[1:3,]
gbsa <- gbsa[1:3,]
extract_rasterpoints(glottopoints = gbsa, geodata = geodata, radius = 10, fun = mean)
geodata <- gbsa[1:3,]
extract_rasterpoints(glottopoints = gbsa, geodata = geodata, radius = 10, fun = mean)
load_all()
extract_rasterpoints(glottopoints = gbsa, geodata = geodata, radius = 10, fun = mean)
extractraster(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
load_all()
extractraster(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
glottodata
glottodata <- gbsa[1:3,]
glottodata
extractraster(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
load_all()
extractraster(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
geodata
geodata <- get_geodata(path)
geodata
extractraster(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
load_all()
extractgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
load_all()
extractgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
extractgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean, add = FALSE)
extractgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean, add = FALSE)
load_all()
extractgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean, add = FALSE)
load_all()
extractgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean, add = FALSE)
extractgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
addgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
document()
load_all()
addgeodata(glottodata = glottodata, geodata = geodata, radius = 10, fun = mean)
gdsa
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
gbsa <- glot2geoglot(gbsa)
load_all()
points2pols(points = gdsa, interpolation = "thiessen", continent = "south america")
gdsa
points2pols(points = gbsa, interpolation = "thiessen", continent = "south america")
load_all()
points2pols(points = gbsa, interpolation = "thiessen", continent = "south america")
load_all()
points2pols(points = gbsa, interpolation = "thiessen", continent = "south america")
# Alternative could be to convert to equidistant projection: https://epsg.io/54032
epsg_utm <- lonlat2utm(sf::st_coordinates(points))
points = gbsa
load_all()
points2pols(points = gbsa, interpolation = "thiessen", continent = "south america")
points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "south america")
glottopoints = gbsa
interpolation = "thiessen"
continent = "south america"
load_all()
points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "south america")
glottopoints <- contransform_lonlat(glottopoints)
# Alternative could be to convert to equidistant projection: https://epsg.io/54032
epsg_utm <- lonlat2utm(sf::st_coordinates(glottopoints))
pts <- sf::st_transform(glottopoints, sf::st_crs(epsg_utm))
pols <- sf::st_collection_extract(sf::st_voronoi(do.call(c, sf::st_geometry(pts))))
pts
sf::st_voronoi(do.call(c, sf::st_geometry(pts)))
sf::st_geometry(pts)
gbsa$geometry
anyNA(gbsa$geometry)
glottopoints
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
gbsa <- glot2geoglot(gbsa)
glottodata <- gbsa[1:3,]
points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "south america")
points2pols(glottopoints = glottodata, interpolation = "thiessen", continent = "south america")
load_all()
points2pols(glottopoints = glottodata, interpolation = "thiessen", continent = "south america")
load_all()
points2pols(glottopoints = glottodata, interpolation = "thiessen", continent = "south america")
purrr::is_empty(country)
country == NULL
country = NULL
purrr::is_empty(country)
load_all()
points2pols(glottopoints = glottodata, interpolation = "thiessen", continent = "south america")
load_all()
points2pols(glottopoints = glottodata, interpolation = "thiessen", continent = "south america")
points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "south america")
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
gbsa <- glot2geoglot(gbsa)
gbsa
gb
# Adding names of countries and continents
world <- rnaturalearth::ne_countries(returnclass = "sf", scale = "medium")
world
world <- world[, c("name", "continent", "subregion")]
world
names(world)[1]
names(world)[1] <- "country"
identicalcrs(x = glottodata, y = world)
glottodata
data <- sf::st_join(x = glottodata, y = world, left = TRUE)
data
load_all()
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
gbsa <- glot2geoglot(gbsa)
glottologdata <- get_glottolog("glottolog")
glottologdata
glottodata_addcountries(glottologdata)
load_all()
glottodata_addcountries(glottologdata)
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
gbsa <- glot2geoglot(gbsa)
glottologdata
glot2geoglot(glottologdata)
x <- glot2geoglot(glottologdata)
x
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
gbsa <- glot2geoglot(gbsa)
gbsa
is_sf(gbsa)
gbsa
points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "south America")
pols <- points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "south America")
plot(pols)
pols <- points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "South America")
plot(pols)
load_all()
pols <- points2pols(glottopoints = gbsa, interpolation = "thiessen", continent = "South America")
plot(pols)
plot(pols$family_size)
plot(pols[[family_size]])
plot(pols[,family_size])
plot(pols[,"family_size"])
glottofilter(continent = "South America")
load_all()
glottofilter(continent = "South America")
pols
glottodata <- pols
unique(sf::st_geometry_type(glottodata))
all(unique(sf::st_geometry_type(glottodata)) == "POLYGON")
any(unique(sf::st_geometry_type(glottodata)) == "POLYGON")
glottodata
glottodata()
get_glottobase()
load_all()
glottodata
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
glottodata <- gbsa[1:3,]
glottodata
glottopoints <- points2pols(glottopoins)
glottopols <- points2pols(glottopoints)
glottopols <- points2pols(glottopoints, interpolation = "voronoi")
points2pols(glottopoints = glottopoints, interpolation = "thiessen", continent = "south america")
glottopoints
gb <- glottologbooster(glottologdata = glottobase)
gbsa <- glottofilter(glottodata = gb, continent = "South America")
glottopoints <- glottofilter(glottodata = gb, continent = "South America")
glottopoints <- glottopoints[1:30, ]
glottopoints
extractgeodata(glottodata = glottopoints, geodata = geodata, radius = 10, fun = mean)
glottopols <- points2pols(glottopoints, interpolation = "voronoi")
extractgeodata(glottodata = glottopoints, geodata = geodata, radius = 10, fun = mean)
extractgeodata(glottodata = glottopols, geodata = geodata, radius = 10, fun = mean)
glottopoints <- glottopoints[1:3, ]
glottopols <- points2pols(glottopoints, interpolation = "voronoi")
extractgeodata(glottodata = glottopols, geodata = geodata, radius = 10, fun = mean)
extractgeodata(glottodata = glottopols, geodata = geodata, fun = mean)
glottopols
plot(glottopols)
glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
plot(glottopols)
glottopoints <- glottofilter(continent = "Colombia")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "Colombia")
glottopoints
glottopoints <- glottofilter(country = "Colombia")
glottopoints
glottopoints <- glottofilter(country = "Netherlands")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
glottopols
glottolog <- get_glottolog(data = "glottolog")
glottobase <- glottologbooster(glottologdata = glottolog)
glottobase
glottopoints <- glottofilter(country = "Netherlands")
glottopoints
points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
?sf::st_intersection
country <- rnaturalearth::ne_countries(country = country, continent = continent, returnclass = "sf", scale = "medium")
country
sf:st_geometry(country)
sf::st_geometry(country)
load_all()
points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
glottopoints <- glottofilter(country = "Netherlands")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "Netherlands")
glottopols
extractgeodata(glottodata = glottopols, geodata = geodata, radius = 10, fun = mean)
plot(glottopols)
message("argument 'radius' not relevant for the specified interpolation.")
extractgeodata(glottodata = glottopols, geodata = geodata,fun = mean)
?get_geodata
#' glottopoints <- glottofilter(continent = "South America")
#' glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
glottopols
glottopols
glottomap(pols = glottopols)
load_all()
load_all()
glottomap_dynamic(pols = glottopols)
glottomap_dynamic(glottodata = glottopols)
glottodata = glottopols
is_polygon(glottodata)
tmap::tmap_mode("view")
tmap::tm_shape(pols)
tmap::tm_shape(pols) +
tmap::tm_polygons(id = label, col = colorby)
glottodata
label = "glottocode"
tmap::tm_shape(pols) +
tmap::tm_polygons(id = label, col = colorby)
label <- "glottocode"
tmap::tm_shape(pols) +
tmap::tm_polygons(id = label, col = colorby)
tmap::tm_shape(pols) +
tmap::tm_polygons()
pols
load_all()
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottopols
load_all()
glottopols
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottodata = glottopols
label = "glottocode"
colorby = "family_size"
tmap::tmap_mode("view")
is_polygon(glottodata)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby)
load_all()
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottopoints <- glottofilter(continent = "South America")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", country = "South America")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size")
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
glottopoints
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
?tmap
load_all()
glottomap_dynamic(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "cont")
glottodata <- glottopols
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "cont")
col
colorby
colorby <- "family_size_rank"
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "cont")
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, style = "order")
colorby
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby)
colorby = "family_size"
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank")
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 25)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 25)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 100)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 25)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 70)
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = "family_size_rank", n = 100)
suppressMessages(tmap::tmap_mode("view"))
map::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 25)}
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 25)}
colorby = "family_size_rank"
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 100)}
dev.off()
dev.off()
tmap::tm_basemap("Esri.WorldTopoMap") +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(id = label, col = colorby, n = 100)}
