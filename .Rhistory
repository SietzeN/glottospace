rowmissing <- rowmissing[rowmissing$missing != 0, "missing", drop = FALSE]
rowmissing
by = "row"
datamissing <- tibble::column_to_rownames(data, var = id)
datamissing$missing <- ifelse(by == "row", rowSums(is.na(datamissing)),  colSums(is.na(datamissing)) )
datamissing <- datamissing[datamissing$missing != 0, "missing", drop = FALSE]
datamissing
colmissing <- tibble::column_to_rownames(data, var = id)
colmissing$missing <- rowSums(is.na(colmissing) )
colmissing <- colmissing[colmissing$missing != 0, "missing", drop = FALSE]
colmissing
data
rowmissing <- tibble::column_to_rownames(data, var = id)
rowmissing$missing <- colSums(is.na(rowmissing) )
rowmissing <- rowmissing[rowmissing$missing != 0, "missing", drop = FALSE]
rowmissing$missing != 0
rowmissing
rowmissing <- tibble::column_to_rownames(data, var = id)
colSums(is.na(rowmissing) )
rbind(rowmissing, colSums(is.na(rowmissing) ) )
rowmissing <- rbind(rowmissing, colSums(is.na(rowmissing) ) )
rowmissing
rowmissing <- rbind(rowmissing, "missing" = colSums(is.na(rowmissing) ) )
rowmissing
rowmissing["missing", ]
rowmissing["missing", ] != 0
rowmissing[rowmissing["missing", ] != 0, ]
rowmissing["missing", ] != 0
rowmissing["missing", rowmissing["missing", ] != 0]
rowmissing["missing", rowmissing["missing", ] != 5]
rowmissing["missing", rowmissing["missing", ] != 5, drop = FALSE]
load_all()
glottodata <- get_glottodata(meta = FALSE)
checkglottodata(glottodata = glottodata)
data
colmissing <- tibble::column_to_rownames(data, var = id)
colmissing$missing <- rowSums(is.na(colmissing) )
colmissing[colmissing$missing != 0, "missing", drop = FALSE]
colmissing$missing
colmissing$missing != 0
any(colmissing$missing != 0)
data
datamissing <- tibble::column_to_rownames(data, var = id)
datamissing$missing <- rowSums(is.na(datamissing) )
if(any(datamissing$missing != 0)){
message("Some rows have missing data:")
datamissing[datamissing$missing != 0, "missing", drop = FALSE]
}
datamissing <- tibble::column_to_rownames(data, var = id)
datamissing$count <- rowSums(is.na(datamissing) )
if(any(datamissing$count != 0)){
message("Some rows have missing data:")
datamissing[datamissing$count != 0, "count", drop = FALSE]
}
datamissing <- tibble::column_to_rownames(data, var = id)
datamissing <- rbind(datamissing, "count" = colSums(is.na(datamissing) ) )
datamissing
datamissing["count", rowmissing["count", ] != 0, drop = FALSE]
datamissing["count", datamissing["count", ] != 0, drop = FALSE]
t(datamissing)
x <- datamissing["count", datamissing["count", ] != 0, drop = FALSE]
t(x)
datamissing["count", ] != 0
load_all()
glottodata <- get_glottodata(meta = FALSE)
checkglottodata(glottodata = glottodata)
glottodata
data <- glottodata
datamissing <- tibble::column_to_rownames(data, var = id)
id = "glottocode"
datamissing <- tibble::column_to_rownames(data, var = id)
datamissing <- rbind(datamissing, "count" = colSums(is.na(datamissing) ) )
datamissing
any(datamissing["count", ] != 0)
message("Some columns have missing data:")
datamissing["count", datamissing["count", ] != 0, drop = FALSE]
datamissing["count", datamissing["count", ] != 0, drop = FALSE]
load_all()
glottodata <- get_glottodata(meta = FALSE)
checkglottodata(glottodata = glottodata)
glottodata
data = glottodata
id
checkdata_colmissing(data = glottodata, id = id)
checkdata_rowmissing(data = glottodata, id = id)
checkglottodata(glottodata = glottodata)
datamissing[datamissing$count != 0, "count", drop = FALSE]
datamissing <- tibble::column_to_rownames(data, var = id)
datamissing$count <- rowSums(is.na(datamissing) )
if(any(datamissing$count != 0)){
message("Some rows have missing data:")
datamissing[datamissing$count != 0, "count", drop = FALSE]
}
datamissing <- tibble::column_to_rownames(data, var = id)
datamissing <- rbind(datamissing, "count" = colSums(is.na(datamissing) ) )
if(any(datamissing["count", ] != 0)){
message("Some columns have missing data:")
datamissing["count", datamissing["count", ] != 0, drop = FALSE]
}
print(datamissing["count", datamissing["count", ] != 0, drop = FALSE])
load_all()
checkglottodata(glottodata = glottodata)
glottodata <- get_glottodata()
glottodata
glottodata$structure$type
glottodata$lookup
glottodata$lookup[,1]
glottodata$structure$type %in% c("symm", "asymm", "factor", "ordered", "numeric", "ordratio", "logratio")
all(glottodata$structure$type %in% c("symm", "asymm", "factor", "ordered", "numeric", "ordratio", "logratio"))
create_lookupsheet()
create_lookupsheet()[,"type_lookup"]
!all(glottodata$structure$type %in% create_lookupsheet()[,"type_lookup"])
glottodata$structure$type
create_lookupsheet()[,"type_lookup"]
glottodata$structure$type %in% create_lookupsheet()[,"type_lookup"]
all(glottodata$structure$type %in% create_lookupsheet()[,"type_lookup"])
glottodata
names(glottodata)
paste(names(glottodata))
paste(names(glottodata), sep = ", ")
paste(names(glottodata), collapse = ", ")
sheetnames <- paste(names(glottodata), collapse = ", ")
sheetnames
createglottodata()
paste("This glottodataset contains the folowing sheets:", sheetnames)
glottodata$structure$weight
weight = glottodata$structure$weight
glottosubdata
glottosubdata <- glottosubdata[[1]]
glottosubdata
glottosubdata
funcsource(glottocode_exists)
glottosubcodes <- glottosubdata$glottosubcode
glottosubcodes
strsplit(glottosubcodes, split = "_")
unlist(strsplit(glottosubcodes, split = "_"))
strsplit(glottosubcodes, split = "_")
?strsplit
str <- "qwerty keyboard"
result_1 <- strsplit(str,"[[:space:]]")[[1]][1]
result_2 <- strsplit(str,"[[:space:]]")[[1]][2]
result_1
strsplit(glottosubcodes, split = "_")[1]
strsplit(glottosubcodes, split = "_")[[1]][1]
strsplit(glottosubcodes, split = "_")[[1]][1]
strsplit(glottosubcodes, split = "_")[[1]][2]
strsplit(glottosubcodes, split = "_")[[1]][3]
length(glottosubcodes)
gsc_df <- data.frame(matrix(nrow = length(glottosubcodes), ncol = 3) )
gsc_df
colnames(gsc_df) <- c("glottocode", "group", "n")
gsc_df
seq(glottosubcodes)
gsc_df
for(i in seq(glottosubcodes)){
gsc_df[i, "glottocode"] <- strsplit(glottosubcodes, split = "_")[[i]][1]
gsc_df[i, "group"] <- strsplit(glottosubcodes, split = "_")[[i]][2]
gsc_df[i, "n"] <- strsplit(glottosubcodes, split = "_")[[i]][3]
}
gsc_df
glottosubdata <- get_glottodata(meta = FALSE, dummy = "glottosubdata")
join_glottodata(glottosubdata)
glottosubdata <- join_glottodata(glottosubdata)
checkdata_glottosubcol(glottosubdata = glottosubdata)
load_all()
checkdata_glottosubcol(glottosubdata = glottosubdata)
load_all()
id <- "glottosubcode"
checkdata_glottosubcol(glottosubdata = glottosubdata)
checkdata_idmissing(data = glottosubdata, id = id)
checkdata_idunique(data = glottosubdata, id = id)
checkdata_twolevels(data = glottosubdata)
checkdata_glottosubcodes(glottosubdata = glottosubdata)
checkdata_varlevels(data = glottosubdata)
naviewer(data = glottosubdata, id = id)
library(devtools)
load_all()
document()
document()
load_all()
install(force = TRUE)
install.packages(glottospace)
install.packages("glottospace")
install.packages("glottospace")
get_glottodata()
load_all()
library(devtools)
load_all()
get_glottodata()
glottodata <- get_glottodata()
str(glottodata)
1. glottodata. This is user-provided data that consist of a glottocode and any number of linguistic and/or cultural variables (features).
``` r
glottodata <- get_glottodata(meta = FALSE)
glottodata
```
2. glottospace. This returns points or polygons for each language in [glottolog](https://glottolog.org/).
``` {r}
glottospace <- get_glottospace()
head(glottospace)
```
3. glottobase. This is a boosted/enriched version of [glottolog](https://glottolog.org/).
``` {r glottospace}
glottobase <- get_glottobase()
colnames(glottobase)
```
glottodata
glottobase <- get_glottobase()
colnames(glottobase)
## Filter by continent
glottopoints <- glottofilter(continent = "South America")
library(glottospace)
## Filter by continent
glottopoints <- glottofilter(continent = "South America")
glottopols <- points2pols(glottopoints, interpolation = "voronoi", continent = "South America")
library(glottospace)
## Filter by continent
glottopoints <- glottofilter(continent = "South America")
glottopols <- points2pols(glottopoints, method = "voronoi", continent = "South America")
funcsource("points2pols")
load_all()
library(glottospace)
## Filter by continent
glottopoints <- glottofilter(continent = "South America")
glottopols <- points2pols(glottopoints, method = "voronoi", continent = "South America")
glottomap(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
glottomap(glottodata = glottopoints, label = "glottocode")
head(glottopoints)
glottopoints <- glottofilter(continent = "South America")
## Plot point data:
glottomap(glottodata = glottopoints, label = "glottocode", colorby = "isolate")
# Interpolate points to polygons:
glottopols <- points2pols(glottopoints, method = "voronoi", continent = "South America")
# Plot polygon data:
glottomap(glottodata = glottopols, label = "glottocode", colorby = "family_size_rank")
install(force = TRUE)
library(devtools)
load_all()
glottodata <- glottofilter(country = "Netherlands")
glottodata <- glottofilter(continent = "South America")
# naturalearth
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
bbox <- sf::st_bbox(glottodata)
bbox <- bbox_expand(bbox)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES"))
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
basemap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES"))
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
basemap <- sf::st_make_valid(basemap)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_make_valid(basemap)
basemap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES"))
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES"))
basemap <- sf::st_make_valid(basemap)
# naturalearth
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_transform(basemap, crs = sf::st_crs(glottodata))
basemap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES"))
basemap <- sf::st_make_valid(basemap)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
# naturalearth
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
# naturalearth
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
crs(basemap)
sf::st_crs(basemap)
library(sf)
?st_crs
st_crs(glottodata)
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_transform(basemap, crs = sf::st_crs(glottodata))
bbox <- sf::st_bbox(glottodata)
bbox <- bbox_expand(bbox)
basemap <- sf::st_crop(basemap, bbox)
basemap <- sf::st_make_valid(basemap)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_as_s2(st_set_precision(basemap, 1e7))
basemap <- sf::st_transform(basemap, crs = sf::st_crs(glottodata))
bbox <- sf::st_bbox(glottodata)
bbox <- bbox_expand(bbox)
basemap <- sf::st_crop(basemap, bbox)
# naturalearth
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_make_valid(basemap)
basemap <- sf::st_as_s2(st_set_precision(basemap, 1e7))
# naturalearth
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_make_valid(basemap)
basemap <- sf::st_as_s2(st_set_precision(basemap, 1e7))
basemap <- sf::st_transform(basemap, crs = sf::st_crs(glottodata))
bbox <- sf::st_bbox(glottodata)
bbox <- bbox_expand(bbox)
basemap <- sf::st_crop(basemap, bbox)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
?st_as_s2.sf
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_make_valid(basemap)
basemap <- sf::st_as_s2(st_set_precision(basemap, 1e7))
basemap <- sf::st_as_ss(basemap)
basemap <- sf::st_as_sf(basemap)
bbox <- sf::st_bbox(glottodata)
bbox <- bbox_expand(bbox)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
?st_set_precision
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_make_valid(basemap)
basemap <- sf::st_set_precision(basemap, 1e7)
# basemap <- sf::st_transform(basemap, crs = sf::st_crs(glottodata))
bbox <- sf::st_bbox(glottodata)
bbox <- bbox_expand(bbox)
# basemap <- sf::st_crop(basemap, bbox)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf") # polygons not valid
basemap <- sf::st_make_valid(basemap)
basemap <- st_as_s2(st_set_precision(ne, 1e7))
basemap <- st_as_sfc(basemap)
# basemap <- sf::st_transform(basemap, crs = sf::st_crs(glottodata))
bbox <- sf::st_bbox(glottodata)
bbox <- bbox_expand(bbox)
# basemap <- sf::st_crop(basemap, bbox)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
plot(basemap)
# rnaturalearth
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_moll <- st_transform(wrld_wrap, "+proj=moll")
plot(st_geometry(wrld_moll), col="transparent")
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
plot(wrld_wrap)
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_proj <- st_transform(wrld_wrap, "+proj=moll")
plot(st_geometry(wrld_proj), col="transparent")
glottodata_proj <- sf::st_transform(glottodata, crs = "+proj=moll")
bbox <- sf::st_bbox(glottodata_proj)
bbox <- bbox_expand(bbox)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
tmap_options(check.and.fix = TRUE)
library(tmap)
tmap_options(check.and.fix = TRUE)
tmap::tm_shape(basemap, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_proj <- st_transform(wrld_wrap, "+proj=eck4")
plot(st_geometry(wrld_proj), col="transparent")
glottodata_proj <- sf::st_transform(glottodata, crs = "+proj=eck4")
bbox <- sf::st_bbox(glottodata_proj)
bbox <- bbox_expand(bbox)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
wrld_proj <- sf::st_make_valid(wrld_proj)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
glottodata <- glottofilter(country = "Netherlands")
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_proj <- sf::st_transform(wrld_wrap, "+proj=eck4")
wrld_proj <- sf::st_make_valid(wrld_proj)
plot(st_geometry(wrld_proj), col="transparent")
glottodata_proj <- sf::st_transform(glottodata, crs = "+proj=eck4")
bbox <- sf::st_bbox(glottodata_proj)
bbox <- bbox_expand(bbox)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
colorby = NULL
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
label = "glottocode"
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "lightgrey") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray20") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray50") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray60") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
rnaturalearth::ne_countries(scale = 10, returnclass = "sf")
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_proj <- sf::st_transform(wrld_wrap, "+proj=eck4")
wrld_proj <- sf::st_make_valid(wrld_proj)
plot(st_geometry(wrld_proj), col="transparent")
glottodata_proj <- sf::st_transform(glottodata, crs = "+proj=eck4")
bbox <- sf::st_bbox(glottodata_proj)
bbox <- bbox_expand(bbox, f = 50)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray60") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_proj <- sf::st_transform(wrld_wrap, "+proj=eck4")
wrld_proj <- sf::st_make_valid(wrld_proj)
plot(st_geometry(wrld_proj), col="transparent")
glottodata_proj <- sf::st_transform(glottodata, crs = "+proj=eck4")
bbox <- sf::st_bbox(glottodata_proj)
bbox <- bbox_expand(bbox, f = 0.5)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray60") + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
# rnaturalearth: WORKS!! https://github.com/r-spatial/sf/issues/541
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_proj <- sf::st_transform(wrld_wrap, "+proj=eck4")
wrld_proj <- sf::st_make_valid(wrld_proj)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray60", alpha = .40) + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
glottodata <- glottofilter(continent = "South America")
basemap <- rnaturalearth::ne_countries(scale = 50, returnclass = "sf")
wrld_wrap <- sf::st_wrap_dateline(basemap, options = c("WRAPDATELINE=YES","DATELINEOFFSET=180"), quiet = TRUE)
wrld_proj <- sf::st_transform(wrld_wrap, "+proj=eck4")
wrld_proj <- sf::st_make_valid(wrld_proj)
# plot(st_geometry(wrld_proj), col="transparent")
glottodata_proj <- sf::st_transform(glottodata, crs = "+proj=eck4")
bbox <- sf::st_bbox(glottodata_proj)
bbox <- bbox_expand(bbox, f = 0.5)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray60", alpha = .40) + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
label = NULL
bbox <- sf::st_bbox(glottodata_proj)
bbox <- bbox_expand(bbox, f = 0.1)
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray60", alpha = .40) + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
colorby = "black"
tmap::tm_shape(wrld_proj, bbox = bbox) + tmap::tm_fill(col = "gray60", alpha = .40) + tmap::tm_borders(lwd=1.2) +
{if(is_polygon(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_polygons(col = colorby)} +
{if(is_point(glottodata))
tmap::tm_shape(glottodata) +
tmap::tm_symbols(col = colorby, scale = .65, alpha = .85) } +
{if(!purrr::is_empty(label)) tmap::tm_text(text = label, size = 0.75, auto.placement = TRUE)} +
tmap::tm_legend(legend.outside = TRUE) + tmap::tm_layout(bg.color = "skyblue")
