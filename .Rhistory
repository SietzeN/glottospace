args <- list(...)
names(args)
create_readmesheet(args)
}
fundot(maintainer = "me")
args
fundot <- function(...){
args <- list(...)
names(args)
create_readmesheet(...)
}
fundot(maintainer = "me")
glottodata <- create_glottosheet(glottocodes = glottocodes, varnames = varnames)
structure <- create_structuresheet(glottocodes = glottocodes, varnames = varnames)
metadata <- create_metasheet(varnames = varnames)
readme <- create_readmesheet(...)
readme <- create_readmesheet()
sheetlist <- list(glottodata, structure, metadata, readme)
lapply(seq_along(sheetlist), function(i){
openxlsx::addWorksheet(wb=glottowb, sheetName = names(sheetlist[i]))
openxlsx::writeData(glottowb, sheet = i, sheetlist[[i]][-length(sheetlist[[i]])])
})
lapply(seq_along(sheetlist), function(i){
openxlsx::addWorksheet(wb=glottoxl, sheetName = names(sheetlist[i]))
openxlsx::writeData(glottoxl, sheet = i, sheetlist[[i]][-length(sheetlist[[i]])])
})
i=1
openxlsx::addWorksheet(wb=glottoxl, sheetName = names(sheetlist[i]))
names(sheetlist[i])
sheetlist
names(glottodata)
glottodata <- create_glottosheet(glottocodes = glottocodes, varnames = varnames)
glottodata
sheetlist <- list("glottodata" = glottodata, "structure" = structure, "metadata" = metadata, "readme" = readme)
sheetlist
lapply(seq_along(sheetlist), function(i){
openxlsx::addWorksheet(wb=glottoxl, sheetName = names(sheetlist[i]))
openxlsx::writeData(glottoxl, sheet = i, sheetlist[[i]][-length(sheetlist[[i]])])
})
openxlsx::addWorksheet(wb=glottoxl, sheetName = names(sheetlist[i]))
glottoxl
getwd()
filepath = paste0(getwd(), "/temp")
filepath
# dropdown
# https://stackoverflow.com/questions/29898269/possible-to-write-excel-formulas-or-data-validation-using-r
saveWorkbook(glottoxl, filepath, overwrite = TRUE)
filepath = paste0(getwd(), "/temp/glottodata.xlsx")
filepath
# dropdown
# https://stackoverflow.com/questions/29898269/possible-to-write-excel-formulas-or-data-validation-using-r
saveWorkbook(glottoxl, filepath, overwrite = TRUE)
# dropdown
# https://stackoverflow.com/questions/29898269/possible-to-write-excel-formulas-or-data-validation-using-r
saveWorkbook(glottoxl, filepath, overwrite = TRUE)
glottoxl
filepath
openxlsx::saveWorkbook(glottoxl, filepath, overwrite = TRUE)
filepath = paste0(getwd(), "/glottodata.xlsx")
filepath
openxlsx::saveWorkbook(glottoxl, filepath, overwrite = TRUE)
varnames
variables = 3
if(is.numeric(variables)){
varnames <- paste0("v", variables)
} else {
varnames <- variables
}
varnames
variables
is.numeric(variables)
is.numeric(variables) & length(variables) == 1
paste0("v", 1:variables)
?sprintf
paste0("bio", sprintf("%02d", seq(1,19)))
paste0("bio", sprintf("%02d", seq(1,variables)))
variables = 101
paste0("bio", sprintf("%02d", seq(1,variables)))
paste0("var", sprintf("%02d", seq(1,variables)))
paste0("var", sprintf("%03d", seq(1,variables)))
variables = 3
varnames <- paste0("var", sprintf("%03d", seq(1,variables)))
glottodata <- create_glottosheet(glottocodes = glottocodes, varnames = varnames)
glottodata
structure <- create_structuresheet(glottocodes = glottocodes, varnames = varnames)
structure
metadata <- create_metasheet(varnames = varnames)
metadata
readme <- create_readmesheet(...) # for testing remove ... readme <- create_readmesheet()
readme
sheetlist <- list("glottodata" = glottodata,
"structure" = structure,
"metadata" = metadata,
"readme" = readme)
sheetlist
data.frame("Gender" = c("male", "female"))
lookup <- data.frame(matrix(nrow = 7, ncol = 2) )
lookup[,1] <- c("symm",
"asymm",
"factor",
"ordered",
"numeric",
"logratio",
"ordratio")
lookup[,2] <- c("symm",
"asymm",
"factor",
"ordered",
"numeric",
"logratio",
"ordratio")
lookup
?daisy
load_all()
document()
rm(list = c("create_glottosheet", "create_metasheet", "create_readmesheet", "create_structuresheet", "createglottodata"))
document()
load_all()
lookup <- create_lookupsheet()
lookup
structure
sheetlist <- list("glottodata" = glottodata,
"structure" = structure,
"metadata" = metadata,
"readme" = readme,
"lookup" = lookup)
lapply(seq_along(sheetlist), function(i){
openxlsx::addWorksheet(wb=glottoxl, sheetName = names(sheetlist[i]))
openxlsx::writeData(glottoxl, sheet = i, sheetlist[[i]][-length(sheetlist[[i]])])
})
glottoxl <- openxlsx::createWorkbook()
glottodata <- create_glottosheet(glottocodes = glottocodes, varnames = varnames)
# openxlsx::addWorksheet(glottoxl, "glottodata")
# openxlsx::writeData(glottodata, sheet = "glottosheet", x = glottodata, startCol = 1)
structure <- create_structuresheet(glottocodes = glottocodes, varnames = varnames)
metadata <- create_metasheet(varnames = varnames)
readme <- create_readmesheet(...) # for testing remove ... readme <- create_readmesheet()
lookup <- create_lookupsheet()
sheetlist <- list("glottodata" = glottodata,
"structure" = structure,
"metadata" = metadata,
"readme" = readme,
"lookup" = lookup)
lapply(seq_along(sheetlist), function(i){
openxlsx::addWorksheet(wb=glottoxl, sheetName = names(sheetlist[i]))
openxlsx::writeData(glottoxl, sheet = i, sheetlist[[i]][-length(sheetlist[[i]])])
})
# dropdown
# https://stackoverflow.com/questions/29898269/possible-to-write-excel-formulas-or-data-validation-using-r
# check if path exists, if subfolder doesn't exist, it doesn't write.
openxlsx::saveWorkbook(glottoxl, filepath, overwrite = TRUE)
sheetlist
install.packages("r2excel")
?write.xlsx
install.packages("writexl")
library(writexl)
?writexl
write_xlsx(sheetlist, path = filepath)
write_xlsx(sheetlist, path = filepath)
readme
colnames(readme) = NULL
readme
?openxlsx
wb <- openxlsx::read.xlsx(filepath)
wb
filepath
wb <- openxlsx::read.xlsx(filepath)
wb
glottodata <- create_glottosheet(glottocodes = glottocodes, varnames = varnames)
structure <- create_structuresheet(glottocodes = glottocodes, varnames = varnames)
metadata <- create_metasheet(varnames = varnames)
readme <- create_readmesheet()
readme
lookup <- create_lookupsheet()
create_readmesheet(maintainer = "Rik van Gijn", email = "e.van.gijn@hum.leidenuniv.nl", url = "https://www.universiteitleiden.nl/en/research/research-projects/humanities/south-american-population-history-revisited-multidisciplinary-perspectives-on-the-upper-amazon")
sheetlist <- list("glottodata" = glottodata,
"structure" = structure,
"metadata" = metadata,
"readme" = readme,
"lookup" = lookup)
# dropdown
# https://stackoverflow.com/questions/29898269/possible-to-write-excel-formulas-or-data-validation-using-r
# check if path exists, if subfolder doesn't exist, it doesn't write.
writexl::write_xlsx(sheetlist, path = filepath) # works better than openxlsx, which omitted some columns..
readme
readme <- create_readmesheet(maintainer = "Rik van Gijn", email = "e.van.gijn@hum.leidenuniv.nl", url = "https://www.universiteitleiden.nl/en/research/research-projects/humanities/south-american-population-history-revisited-multidisciplinary-perspectives-on-the-upper-amazon")
sheetlist <- list("glottodata" = glottodata,
"structure" = structure,
"metadata" = metadata,
"readme" = readme,
"lookup" = lookup)
# check if path exists, if subfolder doesn't exist, it doesn't write.
writexl::write_xlsx(sheetlist, path = filepath) # works better than openxlsx, which omitted some columns..
load_all()
readme <- create_readmesheet(maintainer = "Rik van Gijn", email = "e.van.gijn@hum.leidenuniv.nl", url = "https://www.universiteitleiden.nl/en/research/research-projects/humanities/south-american-population-history-revisited-multidisciplinary-perspectives-on-the-upper-amazon")
readme
sheetlist <- list("glottodata" = glottodata,
"structure" = structure,
"metadata" = metadata,
"readme" = readme,
"lookup" = lookup)
# check if path exists, if subfolder doesn't exist, it doesn't write.
writexl::write_xlsx(sheetlist, path = filepath) # works better than openxlsx, which omitted some columns..
?funcsource
funcsource(get_glottodata)
glottocodes
ifelse(is.null(n), 1, n)
ifelse(!exists(n), 1, n)
ifelse(!exists("n"), 1, n)
glottocode <- glottocodes[1]
glottocode
n
n <- ifelse(!exists("n"), 1, n)
n
paste0(glottocode, sprintf("%04d", seq(1,n)))
paste(glottocode, sprintf("%04d", seq(1,n)), sep = "_")
paste(glottocode, groups, subgroups, sprintf("%04d", seq(1,n)), sep = "_")
groups = NULL
subgroups = NULL
paste(glottocode, groups, subgroups, sprintf("%04d", seq(1,n)), sep = "_")
paste(glottocode, groups, subgroups, sprintf("%04d", seq(1,n)), collapse = "_")
paste0(glottocode, groups, subgroups, sprintf("%04d", seq(1,n)), collapse = "_")
paste(glottocode, groups, subgroups, sprintf("%04d", seq(1,n)), sep = "_", recycle0 = TRUE)
paste(glottocode, groups, subgroups, sprintf("%04d", seq(1,n)), collapse = "_", recycle0 = TRUE)
glottosub <- c(glottocode, groups, subgroups)
glottosub
groups = "bla"
glottosub <- c(glottocode, groups, subgroups)
glottosub
paste(glottosub, sprintf("%04d", seq(1,n)), sep = "_")
glottosub
paste(glottosub, sprintf("%04d", seq(1,n)), collapse = "_")
paste(glottosub)
glottosub <- paste(c(glottocode, groups, subgroups), sep = "_")
glottosub
groups
paste(c(glottocode, groups, subgroups), sep = "_")
glottosub <- paste(c(glottocode, groups, subgroups), collapse = "_")
glottosub
groups = NULL
glottosub <- paste(c(glottocode, groups, subgroups), collapse = "_")
glottosub
n
paste(glottosub, sprintf("%04d", seq(1,n)), sep = "_")
glottogroups <- paste(c(glottocode, groups), collapse = "_")
glottogroups
groups = c("a","b","c")
glottogroups <- paste(c(glottocode, groups), collapse = "_")
glottogroups
glottogroups <- paste(c(glottocode, groups), sep = "_")
glottogroups
paste(c(glottocode, groups), sep = "_")
glottogroups <- paste(c(glottocode, groups), sep = "_")
glottogroups
paste(glottocode, groups, sep = "_")
glottogroups <- paste(glottocode, groups, sep = "_")
paste(glottogroups, sprintf("%04d", seq(1,n)), sep = "_")
groups
groups <- c("a", "b")
sprintf("%04d", seq(1,n))
n = 5
sprintf("%04d", seq(1,n))
glottogroups
glottogroups <- paste(glottocode, groups, sep = "_")
source('C:/Users/sjnor/surfdrive/PROJECTS_SN/SAPPHIRE/R/glottospace/R/createglottodata.R', echo=TRUE)
glottogroups
paste(glottogroups, sprintf("%04d", seq(1,n)), sep = "_")
paste(glottogroups, sprintf("%04d", seq(1,n)), sep = "_", recycle0 = TRUE)
paste(glottogroups, sprintf("%04d", seq(1,n)), sep = "_", recycle0 = FALSE)
glottogroups
paste(glottogroups, sprintf("%04d", seq(1,n)), collapse = "_")
length(groups)
glottogroups
length(glottogroups)
lapply(glottogroups, paste(1:4, sep = "-"))
lapply(glottogroups, paste(glottogroups, 1:4, sep = "-"))
apply(glottogroups, paste(glottogroups, 1:4, sep = "-"))
lapply(glottogroups, paste(glottogroups, 1:4, sep = "-"))
seq(1,length(glottogroups))
i = 1
paste(glottogroups[i], sprintf("%04d", seq(1,n)), sep = "_")
a <- 1:120
b <- a[seq(1, length(a), 6)]
b
length(glottogroups)
a <- 1:(n * length(glottogroups))
a
length(glottogroups)
n
b <- a[seq(1, length(a), length(glottogroups))]
b
length(a)
length(glottogroups)
b <- a[seq(1, length(a), n)]
b
paste(glottogroups[i], sprintf("%04d", seq(1,n)), sep = "_")
rep(glottocode, n)
rep(groups, n)
glottosubcodes <- 1:(n * length(glottogroups))
glottosubcodes
glottogroups
seq(1, 4)
seq(2, 1)
seq(4, 1)
seq(1, n)
i*n
i*n + seq(1,n)
glottosubcodes <- 1:(n * length(glottogroups))
i
glottosubcodes[i*n + seq(1,n)] <- paste(glottogroups[i], sprintf("%04d", seq(1,n)), sep = "_")
glottosubcodes
i
i
n
seq(1,n)
i
glottosubcodes <- 1:(n * length(glottogroups))
for(i in seq(1,length(glottogroups))){
glottosubcodes[(i*n - n) + seq(1,n)] <- paste(glottogroups[i], sprintf("%04d", seq(1,n)), sep = "_")
}
glottosubcodes
glottocode_exists(glottocode)
if(!glottocode_exists(glottocode) ){stop("glottocode is not valid")}
varnames
metadata <- data.frame(matrix(nrow = length(varnames), ncol = 5) )
metadata
colnames(metadata) <- c("varname", "description", "source", "contributor", "remarks")
metadata
metadata[,"varname"]
metadata[,"varname"] <- varnames
metadata
getwd()
glottocodes
glottocodes = c("yucu1253", "abcd1234")
glottocodes
seq(glottocodes)
?list
glottosublist <- vector(mode='list', length= length(glottocodes))
glottosublist
i
i=1
glottosubcodes <- create_glottosubcodes(glottocode = i, groups = groups, n = n)
glottosubcodes
load_all()
library(devtools)
load_all()
glottocodes = c("yucu1253", "abcd1234")
variables = 3
groups = c("a", "b")
n = 5
variables
if(is.numeric(variables) & length(variables) == 1){
varnames <- paste0("var", sprintf("%03d", seq(1,variables)))
} else {
varnames <- variables
}
varnames
glottosublist <- vector(mode='list', length= length(glottocodes))
glottosublist
i
glottosubcodes <- create_glottosubcodes(glottocode = i, groups = groups, n = n)
i
glottosubcodes <- create_glottosubcodes(glottocode = glottocodes[i], groups = groups, n = n)
groups
glottocodes[i]
glottocode
glottocode <- glottocodes[i]
if(length(glottocode != 1)){stop("Please provide a single glottocode")}
load_all()
glottosubcodes <- create_glottosubcodes(glottocode = glottocodes[i], groups = groups, n = n)
glottosubcodes
glottosubdata <- create_glottosheet(glottocodes = glottosubcodes, varnames = varnames)
glottosubdata
glottosublist[[i]] <- create_glottosheet(glottocodes = glottosubcodes, varnames = varnames)
glottosublist
structure <- create_structuresheet(glottocodes = glottocodes, varnames = varnames)
metadata <- create_metasheet(varnames = varnames)
metadata
readme <- create_readmesheet()
lookup <- create_lookupsheet()
glottosublist
names(glottosublist[[i]])
glottosublist
names(glottosublist)
names(glottosublist)[[1]]
glottocodes[i]
names(glottosublist)[[1]] <- glottocodes[i]
names(glottosublist)
names(glottosublist)[[i]] <- glottocodes[i]
for(i in seq(glottocodes)){
glottosubcodes <- create_glottosubcodes(glottocode = glottocodes[i], groups = groups, n = n)
glottosublist[[i]] <- create_glottosheet(glottocodes = glottosubcodes, varnames = varnames)
names(glottosublist)[[i]] <- glottocodes[i]
}
glottosublist
if(!all(glottocode_exists(glottocodes)) ){stop("Not all glottocodes are valid. Use glottocode_exists() to check which ones. ")}
glottosearch("tanim")
glottosearch(find = "tanim")
glottocodes = c("yucu1253", "tani1257")
if(is.numeric(variables) & length(variables) == 1){
varnames <- paste0("var", sprintf("%03d", seq(1,variables)))
} else {
varnames <- variables
}
glottosublist <- vector(mode='list', length= length(glottocodes))
for(i in seq(glottocodes)){
glottosubcodes <- create_glottosubcodes(glottocode = glottocodes[i], groups = groups, n = n)
glottosublist[[i]] <- create_glottosheet(glottocodes = glottosubcodes, varnames = varnames)
names(glottosublist)[[i]] <- glottocodes[i]
}
structure <- create_structuresheet(glottocodes = glottocodes, varnames = varnames)
metadata <- create_metasheet(varnames = varnames)
readme <- create_readmesheet(...) # for testing remove ... readme <- create_readmesheet()
lookup <- create_lookupsheet()
sheetlist <- list("structure" = structure,
"metadata" = metadata,
"readme" = readme,
"lookup" = lookup)
sheetlist
c(glottosublist, sheetlist)
filepath
glottosubsheets <- c(glottosublist, sheetlist)
getwd()
filename <- "glottosubdata.xlsx"
# check if path exists, if subfolder doesn't exist, it doesn't write.
writexl::write_xlsx(glottosubsheets, path = filename) # works better than openxlsx, which omitted some columns..
glottosubdata <- create_glottosheet(glottocodes = glottosubcodes, varnames = varnames)
colnames(glottosubdata)[1]
if(!all(glottocode_exists(glottocodes)) ){stop("Not all glottocodes are valid. Use glottocode_exists() to check which ones. ")}
if(is.numeric(variables) & length(variables) == 1){
varnames <- paste0("var", sprintf("%03d", seq(1,variables)))
} else {
varnames <- variables
}
glottosublist <- vector(mode='list', length= length(glottocodes))
for(i in seq(glottocodes)){
glottosubcodes <- create_glottosubcodes(glottocode = glottocodes[i], groups = groups, n = n)
glottosubdata <- create_glottosheet(glottocodes = glottosubcodes, varnames = varnames)
colnames(glottosubdata)[1] <- "glottosubcode"
glottosublist[[i]] <- glottosubdata
names(glottosublist)[[i]] <- glottocodes[i]
}
structure <- create_structuresheet(glottocodes = glottocodes, varnames = varnames)
metadata <- create_metasheet(varnames = varnames)
readme <- create_readmesheet(...) # for testing remove ... readme <- create_readmesheet()
lookup <- create_lookupsheet()
sheetlist <- list("structure" = structure,
"metadata" = metadata,
"readme" = readme,
"lookup" = lookup)
glottosubsheets <- c(glottosublist, sheetlist)
# check if path exists, if subfolder doesn't exist, it doesn't write.
writexl::write_xlsx(glottosubsheets, path = filename) # works better than openxlsx, which omitted some columns..
# message that file was saved
glottosubsheets
(length(varnames)*2)
references <- data.frame(matrix(nrow = length(glottocodes), ncol = (length(varnames)*2) ) )
references
paste(varnames, c("ref", "p"), sep = "_")
varnames[1,1,2,2,3,3]
varnames[c(1,1,2,2,3,3) ]
paste(varnames[c(1,1,2,2,3,3) ], c("ref", "p"), sep = "_")
rep(varnames, each = 2)
colnames(references) <- paste(rep(varnames, each = 2) , c("ref", "p"), sep = "_")
references
references
references <- data.frame(matrix(nrow = length(glottocodes), ncol = (length(varnames)*2)+1 ) )
references
colnames(references) <- c("glottocode", paste(rep(varnames, each = 2) , c("ref", "page"), sep = "_") )
references
references[,"glottocode"] <- glottocodes
references
load_all()
createglottodata(glottocodes = c("yucu1253", "tani1257"), variables = 3, filename = "glottodata.xlsx")
createglottodata(glottocodes = c("yucu1253", "tani1257"), variables = 3, filename = "glottodata.xlsx")
createglottosubdata(glottocodes = c("yucu1253", "tani1257"), variables = 3, groups = c("a", "b"), n = 5, filename = "glottosubdata.xlsx")
funcsource(get_sheetdata)
summary(cars)
get_glottobase()
get_glottospace()
1. glottodata. This is user-provided data that consist of a glottocode and any number of linguistic and/or cultural variables (features).
``` r
glottodata <- get_glottodata()
head(glottodata)
```
2. glottobase. This is a boosted/enriched version of [glottolog](https://glottolog.org/).
``` {r glottospace}
glottobase <- glottospace::get_glottobase()
head(glottobase)
```
3. glottospace. This returns points or polygons for each language in [glottolog](https://glottolog.org/).
``` r
glottospace <- get_glottospace()
head(glottospace)
```
1. glottodata. This is user-provided data that consist of a glottocode and any number of linguistic and/or cultural variables (features).
``` r
glottodata <- get_glottodata()
head(glottodata)
```
2. glottobase. This is a boosted/enriched version of [glottolog](https://glottolog.org/).
``` {r glottospace}
glottobase <- glottospace::get_glottobase()
head(glottobase)
```
3. glottospace. This returns points or polygons for each language in [glottolog](https://glottolog.org/).
``` r
glottospace <- get_glottospace()
head(glottospace)
```
glottospace
glimpse(glottospace)
