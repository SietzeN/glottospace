load_all()
install(force = TRUE)
library(devtools)
document()
load_all()
install(force = TRUE)
document()
load_all()
install(force = TRUE)
install(force = TRUE)
library(devtools)
document()
load_all()
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
load_all()
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
load_all()
get_geodata()
install(force = TRUE) # ALWAYS INSTALL FROM HERE (PACKAGE), NOT FROM OTHER SCRIPT.
load_all()
get_geodata()
library(devtools)
document()
load_all()
install(force = TRUE)
stack <- raster::getData(name = "worldclim", var = "bio", res = 10)
stack$bio1
plot(stack$bio1)
raster::plot(stack$bio1)
glottopoints <- glottofilter(continent = "South America")
glottopoints <- glottopoints[1:3, ]
glottopoints
extractgeodata(glottodata = glottopoints, geodata = stack, radius = 10, fun = mean)
class(stack)
?raster::getData
paths <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s_stack"
stack <- raster::stack(paths)
paths <- "D:/Global/Climate/WORLDCLIM2/1km/South America/worldclimSA1km"
stack <- raster::stack(paths)
stack
raster::plot(stack$bio01)
list.files(paths)
list.files("D:/Global/Climate/WORLDCLIM2/1km/South America")
list.files("D:/Global/Climate/WORLDCLIM2/1km/South America", full.names = TRUE)
stack
outfile <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.tif"
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
outfile <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd"
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
raster::stack(outfile)
stack <- raster::stack(filepaths)
st <- raster::stack(outfile)
raster::plot(st$bio01)
outfile
outfile <- "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.tif"
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
outfile
raster::writeRaster(stack, filename = outfile, format = "raster", overwrite = TRUE)
?writeRaster
raster::writeRaster(stack, filename = outfile, format = "GTiff", overwrite = TRUE)
tools::file_path_sans_ext(outfile)
newnames <- paste0("bio", sprintf("%02d", seq(1,19)))
newnames
names(stack) <- newnames
outfile
raster::writeRaster(stack, filename = outfile, format = "GTiff", overwrite = TRUE)
names(stack)
load_all()
path
ras <- tryCatch(raster::raster(path), error=function(e){})
ras
load_all()
install(force = TRUE)
.rs.restartR()
library(devtools)
load_all()
get_geodata(path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd")
ts <- get_geodata(path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd")
ts
path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd"
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
vec
ras <- tryCatch(raster::raster(path), error=function(e){})
ras
ras <- tryCatch(raster::stack(path), error=function(e){})
ras
ras <- tryCatch(raster::raster(path), error=function(e){})
ras
str(ras)
str(ras)@file
ras@file
ras@file@nbands
ras@file@nbands != 1
!is.null(ras) & ras@file@nbands != 1
load_all()
path = "D:/Global/Climate/WORLDCLIM2/1km/South America/wc2.0_bio_30s.grd"
get_geodata(path = path)
ts <- get_geodata(path = path)
ts
ts <- get_geodata_path(path = path)
ts
load_all()
ts <- get_geodata_path(path = path)
ts
ts <- get_geodata(path = path)
ts
install()
?isLonLat
?st_is_longlat
?group_by
?return
glottodata
glottopoints <- glottofilter(continent = "South America")
glottodata <- glottopoints[1:3,]
is_point(glottodata)
load_all()
is_point(glottodata)
load_all()
is_point(glottodata)
geodata <- get_geodata("D:/Global/Soils/HWSD/1km/Global/sq1.asc")
extracted <- sf::st_intersection(x = glottodata, y = geodata)
elevation <- get_geodata("D:/Global/Topography/SRTM/250m/South America/SRTM250mSA.tif")
geodata <- elevation
extracted <- sf::st_intersection(x = glottodata, y = geodata)
rivervect <- get_geodata("D:/Global/Hydrography/drainage density/South America/South America_constant_Dd.gpkg")
rivers <- rivervect["strmOrder"]
geodata <- rivers
extracted <- sf::st_intersection(x = glottodata, y = geodata)
geodata <- contransform_lonlat(geodata)
extracted <- sf::st_intersection(x = glottodata, y = geodata)
extracted
ecoregions <- get_geodata("D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp")
ecoregions <- ecoregions[, "ECO_NAME"]
names(ecoregions)[1] <- "ecoregion"
geodata <- ecoregions
extracted <- sf::st_intersection(x = glottodata, y = geodata)
extracted
extracted[,names(st_drop_geometry(geodata))]
extracted[,names(sf::st_drop_geometry(geodata))]
sf::st_drop_geometry(geodata)
names(sf::st_drop_geometry(geodata))
extracted
names(geodata)
sf::st_drop_geometry(extracted)[,names(sf::st_drop_geometry(geodata))]
?glot2geoglot
load_all()
stop("glottodata is not recognized as a spatial object, use \code{glot2geoglot} to convert it")
stop("glottodata is not recognized as a spatial object, use 'glot2geoglot' to convert it")
glottopols
glottodata
glottodata  <- points2pols(points = glottodata, type = "buffer", radius = 10)
?points2pols
glottodata  <- points2pols(points = glottodata, interpolation = "buffer", radius = 10)
glottodata  <- points2pols(glottopoints = glottodata, interpolation = "buffer", radius = 10)
glottodata
sf::st_area(glottodata)
ar <- sf::st_area(glottodata)
ar / 1000
plot(glottodata)
all.equal(ar)
identical(ar)
identical(ar)
unique(sf::st_area(glottodata))
if(unique(sf::st_area(glottodata)) != 1){warning('Total length is only meaningful if glottopols have same area.')}
if(length(unique(sf::st_area(glottodata))) != 1){warning('Total length is only meaningful if glottopols have same area.')}
if(length(unique(sf::st_area(glottodata))) != 1){warning(" fun='totlength' is only meaningful if glottopols have same area.")}
str(hello)
str(lonlat2utm)
library(devtools)
load_all()
str(lonlat2utm)
srcfile <- attr(attr(lonlat2utm,"srcref"),"srcfile")
srcfile$filename
srcfile <- attr(attr("lonlat2utm","srcref"),"srcfile")
srcfile$filename
funcname = lonlat2utm
funcname
load_all()
get_funcsource(hello)
get_funcsource(lonlat2utm())
get_funcsource(lonlat2utm
)
noquote("lonlat2utm")
get_funcsource(lonlat2utm)
get_funcsource(noquote("lonlat2utm"))
get_funcsource(eval(noquote("lonlat2utm")))
get_funcsource(substitute(noquote("lonlat2utm")))
get_funcsource(substitute("lonlat2utm"))
get_funcsource(eval("lonlat2utm"))
is.symbol("lonlat2utm")
as.symbol("lonlat2utm")
get_funcsource(as.symbol)
get_funcsource(as.symbol("lonlat2utm"))
x <- as.symbol("lonlat2utm")
x
get_funcsource(x)
?substitute
enquote(lonlat2utm())
quote(lonlat2utm())
x <- quote(lonlat2utm())
gsub("()", x)
gsub(pattern = "()", x = x)
gsub(pattern = "()", x = quote(x))
x <- quote(lonlat2utm())
class(x)
class(lonlat2utm)
as.function(x)
eval(x)
class(ensym("lonlat2utm"))
class(ensyms("lonlat2utm"))
?ensym
library(dplyr)
class(ensyms("lonlat2utm"))
class(ensym("lonlat2utm"))
quote("lonlat2utm")
quote(lonlat2utm)
eval(lonl)
eval(lonlat2utm)
eval("lonlat2utm")
eval("lonlat2utm")
expr("lonlat2utm")
expr(lonlat2utm)
eval(expr(lonlat2utm))
get("lonlat2utm")
load_all()
get_funcsource("lonlat2utm")
get_funcsource(lonlat2utm)
class(lonlat2utm)
class(lonlat2utm())
class(expr(lonlat2utm()))
class(enexpr(lonlat2utm()))
substitute("lonlat2utm")
substitute(lonlat2utm())
substitute(lonlat2utm
)
x <- substitute(lonlat2utm)
eval(x)
class(x)
class(eval(x))
class(lonlat2utm)
get_funcsource("hello")
get_funcsource(hello)
get_funcsource(read_cldf())
get_funcsource(read_cldf
)
get_funcsource(%>%)
get_funcsource("%>%")
get_funcsource(contransform_lonlat())
get_funcsource(contransform_lonlat
)
document()
?lonlat2utm
??glottospace
?glottospace
get_funcsource(glot_exists_one)
hello()
?left_join
glottobase[, c(1:4)]
glottobase[c(1:4), ]
get_glottobase()
glottodata <- glottobase[c(1:4), ]
load_all()
join_glottodata(glottodata)
names(glottodata)
names(glottodata)[1] <- "glottocode"
join_glottodata(glottodata)
x <- join_glottodata(glottodata)
x$geometry
glottodata <- glottodata[,1]
glottodata
x <- join_glottodata(glottodata)
x
glottodata <- glottobase[c(1:4), c(1,2)]
names(glottodata)[1] <- "glottocode"
glottodata
join_glottodata(glottodata)
glottobase
glottobase <- get_glottobase()
glottobase
id
id <- contrans_id2gc(id)
id
id = NULL
id <- contrans_id2gc(id)
id
dplyr::left_join(x = glottodata, y = glottobase, by = id)
sf::st_join(x = glottodata, y = glottobase, by = id)
?merge.data.frame
# dplyr::left_join(x = glottodata, y = glottobase, by = id)
sf::merge(x = glottobase, y = glottodata, by = id)
library(sf)
?st_merge
?merge
?st_join
glottobase
id
sf::merge.sf(x = glottobase, y = glottodata, by = id)
sf::merge(x = glottobase, y = glottodata, by = id)
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("sf")
library(devtools)
?merge.sf
library(sf)
install.packages("Rcpp")
install.packages("Rcpp")
library(sf)
?merge.sf
glottodata[1:4,1:3]
library(glottospace)
glottodata[1:4,1:3]
glottobase[1:3, 1:3]
glottodata <- glottobase[1:3, 1:3]
id <- contrans_id2gc(id)
library(devtools)
load_all()
id <- contrans_id2gc(id)
id = NULL
id <- contrans_id2gc(id)
id
glottobase <- get_glottobase()
glottobase
get_funcsource(get_glottobase())
get_funcsource(get_glottobase)
glottolog <- get_glottolog(data = "glottolog")
glottolog
glottobase <- glottologbooster(glottologdata = glottolog)
glottologdata <- glottolog_addfamilyname(glottologdata)
glottologdata <- glottolog_addisolates(glottologdata)
glottologdata <- glottolog_rmdialects(glottologdata)
glottologdata <- glottolog_rmfamilies(glottologdata)
glottologdata <- glottolog_addfamilysize(glottologdata)
glottologdata <- glottolog_addfamilysizerank(glottologdata)
glottologdata <- glottolog_rmbookkeeping(glottologdata)
glottologdata <- glottolog_rmartifam(glottologdata)
glottologdata <- glottolog_rmsignlangs(glottologdata)
glottologdata <- glottologdata %>% dplyr::rename("glottocode" = "id", "isocode" = "iso639P3code")
glottologdata <- glottolog
glottologdata <- glottolog_addfamilyname(glottologdata)
glottologdata <- glottolog_addisolates(glottologdata)
glottologdata <- glottolog_rmdialects(glottologdata)
glottologdata <- glottolog_rmfamilies(glottologdata)
glottologdata <- glottolog_addfamilysize(glottologdata)
glottologdata <- glottolog_addfamilysizerank(glottologdata)
glottologdata <- glottolog_rmbookkeeping(glottologdata)
glottologdata <- glottolog_rmartifam(glottologdata)
glottologdata <- glottolog_rmsignlangs(glottologdata)
glottologdata <- glottologdata %>% dplyr::rename("glottocode" = "id", "isocode" = "iso639P3code")
glottologdata <- glottologdata %>% dplyr::select(-c(level, description,
markup_description,
child_family_count,
child_language_count))
geoglot
is_sf(glottologdata)
glottologdata <- glot2geoglot(glottologdata)
glottologdata
glottologdata <- glottodata_addcountries(glottologdata)
load_all()
glottobase <- get_glottobase()
sf::merge(x = glottobase, y = glottodata, by = id)
sf::merge.sf(x = glottobase, y = glottodata, by = id)
?st_crs
merge(x = glottobase, y = glottodata, by = id)
by
id
glottobase
glottodata
glottodata
names(glottodata)[1]
names(glottodata)[1] <- "glottocode"
merge(x = glottobase, y = glottodata, by = id)
glottobase
merge(x = glottodata, y = glottobase, by = id)
glottodata
glottobase
?st_join
dplyr::left_join(x = glottodata, y = glottobase, by = id)
glottobase
glottodata
get_glottobase()
glottodata <- get_glottobase()
glottodata
glottodata[c(1:5), ]
glottodata <- glottodata[c(1:5), ]
st_drop_geometry(glottodata)
glottodata <- st_drop_geometry(glottodata)
dplyr::left_join(x = glottodata, y = glottobase, by = id)
join_glottobase(glottodata = glottodata, id = id)
load_all()
join_glottobase(glottodata = glottodata, id = id)
glottodata
glottobase <- get_glottobase()
glottobase
glottobase[,id]
glottobase <- glottobase[,id]
dplyr::left_join(x = glottodata, y = glottobase, by = id)
glottodata
get_funcsource(contrans_id2gc())
get_funcsource(contrans_id2gc)
glottobase
glottolog <- get_glottolog(data = "glottolog")
glottobase <- glot2geoglot(glottolog)
glottospace <- glot2geoglot(glottolog)
glottospace
glottologdata <- get_glottolog(data = "glottolog")
glottologdata
glottologdata <- glottologdata %>% dplyr::rename("glottocode" = "id", "isocode" = "iso639P3code")
glottospace <- glot2geoglot(glottologdata)
glottospace
glottospace <- glottospace[,c("glottocode", "isocode")]
glottospace
checkdata_idunique(glottospace, "glottocode")
checkdata_idunique(st_drop_geometry(glottospace), "glottocode")
get_funcsource(glottodata_spatial)
load_all()
glottospace <- get_glottospace()
glottospace
?glottodata_addcoords
load_all()
?glottodata_addcoords
document9
document()
?glottodata_addcoords
get_funcsource(glottodata_addcoords())
get_funcsource(glottodata_addcoords
)
# Adding names of countries and continents
world <- rnaturalearth::ne_countries(returnclass = "sf", scale = "medium")
world <- world[, c("name", "continent", "subregion")]
names(world)[1] <- "country"
names(world)[3] <- "region"
sf::st_join(x = glottodata, y = world, left = TRUE)
glottodata <- get_glottospace()
glottodata[1:4, ]
glottodata <- glottodata[1:4, ]
sf::st_join(x = glottodata, y = world, left = TRUE)
world
sf::st_make_valid(world)
world <- sf::st_make_valid(world)
sf::st_join(x = glottodata, y = world, left = TRUE)
document()
load_all()
glottodata
colnames(glottodata)
colnames(glottodata) == "glottocode"
sum(colnames(glottodata) == "glottocode")
checkdata_glottocol(data = glottodata)
load_all()
checkdata_glottocol(data = glottodata)
checkdata_glottocol(glottodata = glottodata)
existing <- glottocode_exists(glottodata[[id]])
glottodata
id
glottodata[[id]]
glottocode_exists(glottodata[[id]])
glottocodes_exist(glottodata[[id]])
get_funcsource(glottocode_exists())
get_funcsource(glottocode_exists
)
get_glottospace()
get_glottobase()
load_all()
glottocode_exists(glottodata[[id]])
id
glottodata[[id]]
columns = "glottocode"
find = glottodata[[id]]
purrr::map2_lgl(.x = find, .y = columns, .f = glot_exists_one)
find = glottodata[[id]][1]
find
# TODO: Do not load glottobase each time. This will be solved if glottodata is added to package.
existsdf <- glottosearch(glottodata = get_glottobase(), find = find, partialmatch = FALSE, columns = columns)
existsdf
glottocode
glottocode = glottodata[[id]]
glot_exists(find = glottocode, columns = "glottocode")
glottodata
glottodata = get_glottobase()
glottodata
find
existsdf <- glottosearch(glottodata = get_glottobase(), find = find, partialmatch = FALSE, columns = columns)
existsdf
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
nrow(existsdf) == 1
ifelse(nrow(existsdf) == 1, existing <- TRUE, existing <- FALSE)
nrow(existsdf) == 1
load_all()
existing <- glottocode_exists(glottodata[[id]])
existing
existing <- glottocode_exists(glottodata[[id]])
glottodata[[id]]
document()
document()
load_all()
document()
load_all()
document()
load_all()
document()
utils::browseURL("www.glottolog.org")
utils::browseURL("http://www.glottolog.org")
document()
load_all()
glottocode_online("yucu1253")
glottocode_online("yucu1253")
?glottosearch
install()
