existing <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
length(existing == 1)
nrow(existing == 1)
# }
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
# dplyr::transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
# if(length(glottocode == 1)){
existsdf <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
# }
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
purrr::map_lgl(glottocode, glot_exists1)
glot_exists1 <- function(glottocode){
# dplyr::transmute(glottocode, exists = glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id"))
# if(length(glottocode == 1)){
existsdf <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = "id")
# }
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
purrr::map_lgl(glottocode, glot_exists1)
purrr::map_lgl(c("yucu1253", "tani1258"), glot_exists1)
purrr::map_lgl(c("yucu1253", "tanz1258"), glot_exists1)
load_all
load_all()
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
load_all()
load_all()
glottocode_exists_one
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
glottocode_exists_one <- function(glottocode, column){
existsdf <- glottosearch(glottodata = glottobase(), find = glottocode, partialmatch = FALSE, columns = column)
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
load_all()
purrr::map_lgl(glottocode, glot_exists_one, columns = "id")
purrr::pmap_lgl(glottocode, glot_exists_one, columns = "id")
purrr::map_lgl(glottocode, glot_exists_one, .columns = "id")
purrr::map_lgl(glottocode, glot_exists_one, list(columns = "id"))
document()
load_all()
rm(list = c("glottocode_exists_one"))
glottocode_exists(c("yucu1253"))
glottocode_exists(c("yucu1253", "abcd1234"))
data
data[,idcol]
idcol = "glottocode"
data[,idcol]
glottocode_exists(data[,idcol])
glottocode_exists(c("yucu1253", "abcd1234"))
data[,idcol]
data[idcol]
data[[idcol]]
glottocode_exists(data[[idcol]])
existing <- glottocode_exists(data[[idcol]])
existing
data[existing,idcol]
data[!existing,idcol]
sum(!existing)
message("Not all IDs are valid glottocodes \n The following glottocodes do not exist:")
data[!existing,idcol]
data[existing,idcol]
data[[!existing,idcol]]
data[!existing,idcol, drop = TRUE]
data[existing,idcol, drop = TRUE]
?exec
?map2_lgl
purrr::map2_lgl(.x = glottocode, .f = glottocode_exists_one)
purrr::map_lgl(.x = glottocode, .f = glottocode_exists_one)
glot_exists_one <- function(find, columns){
existsdf <- glottosearch(glottodata = glottobase(), find = find, partialmatch = FALSE, columns = columns)
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
purrr::map2_lgl(.x = glottocode, .y = "id", .f = glot_exists_one)
glot_exists_one <- function(find, columns){
existsdf <- glottosearch(glottodata = glottobase(), find = find, partialmatch = FALSE, columns = columns)
ifelse(nrow(existsdf == 1), existing <- TRUE, existing <- FALSE)
}
glot_exists <- function(find, columns){
purrr::map2_lgl(.x = find, .y = columns, .f = glot_exists_one)
}
glot_exists(find = c("yucu1253", "abcd1234"), columns = "id")
?use_data_raw
use_data_raw(name = "glottobase")
load_all()
rm(list = c("glot_exists", "glot_exists_one"))
load_all()
document()
load_all()
glottodata
glottobase
load_all()
glottobase
document()
install()
load_all()
glottobase
glottobase <- get_glottolog(data = "glottolog")
glottobase
nrow(glottobase)
ncol(glottobase)
write_csv(glottobase, "data-raw/glottobase.csv")
?write.csv
readr::write_csv(glottobase, "data-raw/glottobase.csv")
document()
?glottobase
load_all()
?glottobase
glottobase
library(devtools)
load_all()
glottobase
?use_data
data(glottobase)
save(glottobase, file = "data-raw/glottobase.RData")
glottobase <- get_glottolog(data = "glottolog")
save(glottobase, file = "data-raw/glottobase.RData")
library(devtools)
load_all()
glottobase
install()
glottobase
data(glottobase)
document()
?glottobase
data("glottobase")
save(glottobase, file = "data-raw/glottobase.rda")
glottobase <- get_glottolog(data = "glottolog")
save(glottobase, file = "data-raw/glottobase.rda")
usethis::use_data(glottobase, overwrite = TRUE)
load_all()
library(devtools)
load_all
load_all()
glottodata
glottobase
glottocode_exists(c("yucu1253", "abcd1234"))
load_all()
glottocode_exists(c("yucu1253", "abcd1234"))
d1 <- "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
checkglottodata(data = d1, idcol = 1)
d1
data <- get_sheetdata(path = d1, sheets = 1)
checkglottodata(data = data, idcol = 1)
data
View(data)
d1
checkglottodata(data = data, idcol = 1)
check_varlevels(data = data, messages = messages)
load_all()
check_varlevels(data = data, messages = messages)
check_varlevels(data = data, messages = TRUE)
check_glottocodes(data = data, idcol = idcol, messages = messages)
idcol = 1
messages = TRUE
check_glottocodes(data = data, idcol = idcol, messages = messages)
source('C:/Users/sjnor/surfdrive/PROJECTS_SN/SAPPHIRE/R/glottospace/R/checkuserdata.R')
dpath <- "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
glottodata <- get_sheetdata(path = dpath, sheets = 1)
get_sheetdata <- function(path, sheets = NULL, simplify = TRUE){
if(is.null(sheets)){
data <- base::lapply(X = readxl::excel_sheets(path),
FUN = readxl::read_excel, path = path)
} else {
data <- base::lapply(X = sheets, FUN = readxl::read_excel, path = path)}
if(length(sheets) == 1 & simplify == TRUE){
data <- readxl::read_xlsx(path = path, sheet = sheets)
}
return(data)
}
glottodata <- get_sheetdata(path = dpath, sheets = 1)
checkglottodata(data = glottodata, idcol = 1)
?checkglottodata
??checkglottodata
path <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/NounPhrase_V6.xlsx"
library(devtools)
load_all()
get_sheetnames(path)
path <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/TAME_V6.xlsx.xlsx"
get_sheetnames(path)
path <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/TAME_V6.xlsx"
get_sheetnames(path)
path <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/NounPhrase_V6.xlsx"
get_sheetnames(path)
get_sheetdata(path = path, sheets = c(1:6))
get_sheetdata(path = path, sheets = c(1:16))
data <- get_sheetdata(path = path, sheets = c(1:16))
lapply(data, checkglottodata)
checkglottodata(data)
checkglottodata(data[[1]])
data[[1]]
checkglottodata(data = data[[1]], idcol = 1)
checkglottodata(data = data[[1]], idcol = "NPID")
langlist <- data
# Check whether number of columns are identical across languages
colcount <- lapply(X = lsls, FUN = function(x){length(colnames(x))})
# Check whether number of columns are identical across languages
colcount <- lapply(X = langlist, FUN = function(x){length(colnames(x))})
colcount
colcount <- unlist(colcount, recursive = F)
colcount
langlist
readxl::excel_sheets(path)
sheets
sheets = c(1:16)
readxl::excel_sheets(path)[sheets]
load_all()
source('C:/Users/sjnor/surfdrive/PROJECTS_SN/SAPPHIRE/R/glottospace/R/checkuserdata.R')
data <- get_sheetdata(path = path, sheets = c(1:16))
data
langlist
names(langlist)
length(langlist)
seq_len(16)
seq_len(length(langlist))
is.null(names(langlist))
if(is.null(names(langlist))){names(langlist) <- seq_len(length(langlist))}
names(langlist)
length(unique(colcount)) > 1
unique(colcount)
message('Not all languages have same number of features \n')
message(paste(names(langlist), ": ", colcount, "\n"))
duplicate <- data.frame("id" = 2, "n" = 3)
duplicate
message('IDs are not unique. The following ids have duplicates:')
# message(paste(duplicate$id, cat = ","))
message(paste(duplicate$id, ": ", duplicate$n, "\n"))
source('C:/Users/sjnor/surfdrive/PROJECTS_SN/SAPPHIRE/R/glottospace/R/checkuserdata.R')
data <- get_sheetdata(path = path, sheets = "isolates")
path <- "C:/Users/sjnor/surfdrive/Shared/SAPPHIRE/Output/Presentations/Isolates_WS-Athens/data/dbase_isolates_V2.xlsx"
data <- get_sheetdata(path = path, sheets = "isolates")
data
load_all()
rm(list = c("checkdata_glottocodes", "checkdata_idmissing", "checkdata_idunique", "checkdata_twolevels", "checkdata_varlevels", "checkglottodata"))
data
data <- rbind(data, data[1:5, ])
data
checkdata_idunique(data, 1)
source('C:/Users/sjnor/surfdrive/PROJECTS_SN/SAPPHIRE/R/glottospace/R/checkuserdata.R')
path <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/NounPhrase_V6.xlsx"
data <- get_sheetdata(path = path, sheets = c(1:16) )
langlist <- data
check_colcountsame(langlist = langlist)
langlist[[1]]
langlist[[1]][,"added"] <- langlist[[1]][,"NPID"]
check_colcountsame(langlist = langlist)
?stop
load_all()
rm(list = c("checkdata_glottocodes", "checkdata_idmissing", "checkdata_idunique", "checkdata_twolevels", "checkdata_varlevels", "checkglottodata"))
check_colcountsame(langlist = langlist)
langlist
path <- "C:/Users/sjnor/surfdrive/Shared/Tanimuka_Yucuna/Databases/Voor_Sietze/NounPhrase_V6.xlsx"
data <- get_sheetdata(path = path, sheets = c(1:16) )
load_all()
document()
langlistmerger(langlist = data)
m <- do.call("rbind", langlist)
langlist <- data
m <- do.call("rbind", langlist) # alternative approaches: data.table::rbindlist or plyr::rbind.fill
m
source('C:/Users/sjnor/surfdrive/PROJECTS_SN/SAPPHIRE/R/glottospace/R/checkuserdata.R')
?Person
class(Person)
typeof(Person)
type_of(Person)
type_of("Person")
class("Person")
personList()
personList(... = asfd)
person()
?person
class(person)
typeof(person)
typeof("person")
# Get, set, check glot or geoglot class
# a glot is basically a language data.frame.
# a geoglot object is a spatial language data.frame (inherits sf)
?personList
person(given = c("Sietze", "Maartje"), family = c("Norder", "Buijs"))
p <- person(given = c("Sietze", "Maartje"), family = c("Norder", "Buijs"))
p
class(p)
str(p)
person[1]
p[1]
as.person("Ronald Aylmer Fisher")
p2 <- as.person("Ronald Aylmer Fisher")
p2
str(p2)
p1 <- person("Karl", "Pearson", email = "pearson@stats.heaven")
p1
p <- c(p1, p2)
p
p$family
family(p)
?tryCatch
demo(error.catching)
try(out <- sf::st_read(path),
silent = TRUE)
mtry <- try(out <- sf::st_read(path),
silent = TRUE)
mtry
out
path <- "D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp"
mtry <- try(vec <- sf::st_read(path),
silent = TRUE)
mtry
vec
path <- "D:/Global/Topography/Geomorpho90m/250m/Global/dtm_roughness_merit.dem_m_250m_s0..0cm_2018_v1.0.tif"
mtry <- try(vec <- sf::st_read(path),
silent = TRUE)
mtry
try(ras <- raster::raster(path),
silent = TRUE)
vec <- try(sf::st_read(path),
silent = TRUE)
vec
ras <- try(raster::raster(path),
silent = TRUE)
ras
list(ras, vec)
list("raster" = ras, "vector" = vec)
paste0("Cannot open ", path, ". Please check" )
paste0("Cannot open \" ", path, " \" Please check" )
library(devtools)
load_all
load_all()
vec
ras <- try(raster::raster(path),
silent = TRUE)
ras
class(ras)
path <- "D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp"
vec <- try(sf::st_read(path),
silent = TRUE)
class(vec)
class(vec) != "try-error"
all(class(vec) != "try-error")
all(class(ras) != "try-error")
load_all()
path <- "D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp"
rasveclist <- get_rasveclist(path = path)
load_all()
rasveclist <- get_rasveclist(path = path)
load_all()
rasveclist <- get_rasveclist(path = path)
document()
document()
load_all()
rasveclist <- get_rasveclist(path = path)
library(devtools)
load_all()
load_all()
path <- "D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp"
rasveclist <- get_rasveclist(path = path)
?any
?both
load_all()
rasveclist <- get_rasveclist(path = path)
vec <- try(sf::st_read(path),
silent = TRUE)
if(all(class(vec) != "try-error")){message("Vector data loaded")}
ras <- try(raster::raster(path),
silent = TRUE)
ras <- try(raster::raster(path),
silent = TRUE)
ras
mtry <- try(ras <- raster::raster(path),
silent = TRUE)
ras <- try(raster::raster(path), silent = TRUE)
ras <- tryCatch(raster::raster(path), error=function(e){})
ras
vec <- tryCatch(sf::st_read(path), error=function(e){})
vec
raster::raster(path)
?rasterImage
?raster
# ras <- try(raster::raster(path), silent = TRUE)
ras <- tryCatch(raster::raster(path, writeRaster = FALSE), error=function(e){})
path
load_all()
document()
??glottospace
check()
load_all()
get_rasveclist(path)
path <- "D:/Global/Topography/Geomorpho90m/250m/Global/dtm_roughness_merit.dem_m_250m_s0..0cm_2018_v1.0.tif"
rasveclist <- get_rasveclist(path = path)
rasveclist
rasveclist$raster
??glottospace
create()
document()
path
if(!file.exists(path)){stop("Path not found")}
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
if(!is.null(vec)){message("Vector data loaded")
} else {
ras <- tryCatch(raster::raster(path), error=function(e){})
if(!is.null(ras)){message("Raster data loaded")}
}
if(is.null(vec) & is.null(ras)){
stop(paste0("Cannot open ", path))}
rasveclist <- list("raster" = ras, "vector" = vec)
is.null(rasveclist)
unlist(rasveclist)
rasveclist
ras
vec
rasveclist <- list(ras, vec)
rasveclist
unlist(rasveclist)
Filter(Negate(is.null), rasveclist)
rasveclist <- unlist(list(ras, vec))[[1]]
rasveclist
rasvec <- get_rasvec(path = path)
load_all()
rasvec <- get_rasvec(path = path)
class(rasvec)
is.raster(rasvec)
class(rasvec)
attributes(rasvec)
class(rasvec)
inherits(rasvec,"raster")
is(rasvec, "raster")
rasvec
"raster" %in% class(rasvec)
class(rasvec) == "raster"
class(rasvec)
class(rasvec)[1]
data <- rasvec
class(data)[1] == "RasterLayer" | class(data)[1] == "RasterStack"
path <- "D:/Global/Soils/HWSD/1km/Global/sq1.asc"
rasvec <- get_rasvec(path = path)
rasvec
crs(rasvec)
CRS(rasvec)
st_crs(rasvec)
sf::st_crs(rasvec)
is.na(sf::st_crs(rasvec))
path <- "D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp"
rasvec <- get_rasvec(path = path)
names(rasvec)
rasvec
rasvec <- get_rasvec(path = path)
rasvec
load_all()
rasvec <- get_rasvec(path = path)
load_all()
rasvec <- get_rasvec(path = path)
rasvec
load_all()
rasvec <- get_rasvec(path = path)
rasvec
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
vec
if(!is.null(vec)){message("Vector data loaded")
} else {
ras <- tryCatch(raster::raster(path), error=function(e){})
if(!is.null(ras)){message("Raster data loaded")}
}
if(!is.null(ras)){message("Raster data loaded")}
rm(list = ls())
load_all()
rasvec <- get_rasvec(path = path)
path
path <- "D:/Global/Biodiversity/wwf_terr_ecos/wwf_terr_ecos.shp"
rasvec <- get_rasvec(path = path)
path
load_all()
rasvec <- get_rasvec(path = path)
if(!file.exists(path)){stop("Path not found")}
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
if(!is.null(vec)){message("Vector data loaded")
} else {
ras <- tryCatch(raster::raster(path), error=function(e){})
if(!is.null(ras)){message("Raster data loaded")}
}
if(is.null(vec) & is.null(ras)){
stop(paste0("Cannot open ", path))}
ras <- NULL
if(is.null(vec) & is.null(ras)){
stop(paste0("Cannot open ", path))}
rasvec <- unlist(list(ras, vec))[[1]]
rasvec
list(ras, vec)
unlist(list(ras, vec))
# vec <- try(sf::st_read(path), silent = TRUE)
# if(all(class(vec) != "try-error")){message("Vector data loaded")}
vec <- tryCatch(sf::st_read(path), error=function(e){})
if(!is.null(vec)){ras <- NULL
} else {
ras <- tryCatch(raster::raster(path), error=function(e){})
}
if(is.null(vec) & is.null(ras)){
stop(paste0("Cannot open ", path))
}
if(is.null(vec) & !is.null(ras)){
rasvec <- ras
message("Raster data loaded")
}
if(!is.null(vec) & is.null(ras)){
rasvec <- vec
message("Vector data loaded")
}
rasvec
